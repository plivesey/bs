{"version":3,"sources":["../../cl/player.js","../../cl/game.js","../../cl/callFunctions.js","App.js","serviceWorker.js","index.js","../../cl/playFunctions.js"],"names":["_possibleConstructorReturn","__webpack_require__","_getPrototypeOf","_inherits","_classCallCheck","_createClass","assert","Player","this","key","value","state","Promise","resolve","summary","SyncPlayer","_Player","playHandPlayer","callBullshitPlayer","_this","call","syncPlayHand","playHand","syncCallBullshit","callBullshit","syncRoundSummary","roundSummary","_this2","_this3","_this4","exports","Game","players","deck","Deck","shuffle","hands","dealHands","discard","turn","currentCard","player","gameState","otherPlayerCards","adjustedIndexForPlayerGivenTurn","count","hand","Object","assign","Hand","discardSize","length","turnNumber","numberOfCardsPlayed","gameStateForPlayer","playerTurn","indexOfPlayerInRelationToCurrentPlayer","cardsPlayed","bullshitCalled","callingPlayer","playerLied","bullshitStateForPlayer","revealCards","actualCards","playTurn","then","result","winner","gameWon","gameDrawn","playGame","i","drawnHand","discardedCards","Array","isArray","card","push","askEachPlayerForBullshit","otherPlayers","askForBullshit","validPlay","losingPlayerActualIndex","originalIndexFromAdjustedIndex","addCards","callingPlayerIndex","informPlayersOfRoundSummary","playerIndex","callingPlayerAdjusted","summaryState","index","_this5","currentPlayerIndex","actualIndex","total","cards","_this6","forEach","toArray","j","n","cardIndex","newCards","randomIndex","splice","Math","floor","random","module","_get","_toConsumableArray","alwaysCall","NeverCall","CallPercentage","percentage","factorial","x","choose","k","Call10Percent","_CallPercentage","Lie10Percent","Call50Percent","_CallPercentage2","CallIfLieNeeded","imNext","nextCard","CallUpdatingPercentage","percentages","1","2","3","CallUpdatingPercentageOnWinner","allHands","winningNumberOfCards","min","apply","multiplier","CallPercentageOnWinner","_CallPercentage3","prototype","Collector","CallUnlikely","chanceOfHavingASpecificCard","handSize","cardsLeft","numberOfSpecificCards","deckSize","totalPossibleHands","numberOfHandsWithNoCards","probabilityOfExactlyOneCard","_probabilityOfNoCards","playingStrategies","AlwaysLie","AvoidLying","RallyCloser","callingStrategies","HumanPlayer","onStateChange","classCallCheck","possibleConstructorReturn","getPrototypeOf","playing","cardsToPlay","resolvePlayHand","resolveCallBullshit","resolveSummary","GameComponenet","props","stateChanged","bind","assertThisInitialized","setState","startNewGame","goodPlayingStrategies","goodCallingStrategies","randomArrayElement","array","otherPlayerStrategies","play","player2","player3","player4","game","winningPlayer","gameOver","undefined","_this7","cardLinks","map","react_default","a","createElement","onClick","_this8","playCards","_this9","cardsToAdd","cardsToRemove","text","_this10","playingPlayer","_this11","opponent","opponentDescription","mainComponent","_this12","winText","playingAgainst","playCardsComponent","summaryComponent","bullshitComponent","Component","App","_this13","playingGame","mainContent","_this14","App_GameComponenet","startGame","className","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","ideaLyingCardFromHand","LiePercentage","AlwaysLieOnSingles","_LiePercentage","Lie50Percent","_LiePercentage2","_LiePercentage3","ExpectedValueLiar","oneCard","bsCalled","bsNotCalled","twoCards","threeCards","numberOfCards","bluffing","chanceOfBS","probabilityOfBS","expectedValueForOneCard","expectedValue","expectedValueForTwoCards","expectedValueForThreeCards","extraCards","LyingCloser","_LiePercentage4","closing","canFinishWithoutLying","Closer","_ExpectedValueLiar","arguments","RallyTime","_LiePercentage5","numberOfBetterPlayers","currentTurn","numberOfCardsUsed","_RallyTime"],"mappings":"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","file":"static/js/main.3a53fb33.chunk.js","sourcesContent":["var _possibleConstructorReturn = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _classCallCheck = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/createClass\");\n\nvar assert = require('assert');\n\nvar Player =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function Player() {\n    _classCallCheck(this, Player);\n  }\n\n  _createClass(Player, [{\n    key: \"playHand\",\n    value: function playHand(state) {\n      assert(false, 'You must overwrite this function');\n    }\n  }, {\n    key: \"callBullshit\",\n    value: function callBullshit(state) {\n      assert(false, 'You must overwrite this function');\n      return new Promise(function (resolve) {\n        resolve(false);\n      });\n    }\n  }, {\n    key: \"roundSummary\",\n    value: function roundSummary(summary) {\n      return new Promise(function (resolve) {\n        resolve();\n      });\n    }\n  }]);\n\n  return Player;\n}();\n\nvar SyncPlayer =\n/*#__PURE__*/\nfunction (_Player) {\n  \"use strict\";\n\n  _inherits(SyncPlayer, _Player);\n\n  function SyncPlayer(playHandPlayer, callBullshitPlayer) {\n    var _this;\n\n    _classCallCheck(this, SyncPlayer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SyncPlayer).call(this));\n\n    _this.syncPlayHand = function (state) {\n      return playHandPlayer.playHand(state);\n    };\n\n    _this.syncCallBullshit = function (state) {\n      return callBullshitPlayer.callBullshit(state);\n    };\n\n    _this.syncRoundSummary = function (summary) {\n      if (playHandPlayer.roundSummary) {\n        playHandPlayer.roundSummary(summary);\n      }\n\n      if (callBullshitPlayer.roundSummary) {\n        callBullshitPlayer.roundSummary(summary);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(SyncPlayer, [{\n    key: \"playHand\",\n    value: function playHand(state) {\n      var _this2 = this;\n\n      return new Promise(function (resolve) {\n        resolve(_this2.syncPlayHand(state));\n      });\n    }\n  }, {\n    key: \"callBullshit\",\n    value: function callBullshit(state) {\n      var _this3 = this;\n\n      return new Promise(function (resolve) {\n        resolve(_this3.syncCallBullshit(state));\n      });\n    }\n  }, {\n    key: \"roundSummary\",\n    value: function roundSummary(summary) {\n      var _this4 = this;\n\n      return new Promise(function (resolve) {\n        _this4.syncRoundSummary(summary);\n\n        resolve();\n      });\n    }\n  }]);\n\n  return SyncPlayer;\n}(Player);\n\nexports.Player = Player;\nexports.SyncPlayer = SyncPlayer;","var _classCallCheck = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/createClass\");\n\nvar assert = require('assert');\n\nvar Player = require('./player.js').Player;\n\nvar SyncPlayer = require('./player.js').SyncPlayer;\n\nvar Game =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function Game(players) {\n    _classCallCheck(this, Game);\n\n    var deck = new Deck();\n    deck.shuffle();\n    this.players = players;\n    this.hands = deck.dealHands();\n    this.discard = [];\n    this.turn = 0;\n    this.currentCard = 1;\n  }\n\n  _createClass(Game, [{\n    key: \"gameStateForPlayer\",\n    value: function gameStateForPlayer(player) {\n      var gameState = {}; // The current player is always indexed to zero\n      // So, these are the indexes of the other playerss        \n\n      gameState.otherPlayerCards = [this.hands[this.adjustedIndexForPlayerGivenTurn(player, 1)].count(), this.hands[this.adjustedIndexForPlayerGivenTurn(player, 2)].count(), this.hands[this.adjustedIndexForPlayerGivenTurn(player, 3)].count()];\n      gameState.hand = Object.assign(new Hand(), this.hands[player]);\n      gameState.discardSize = this.discard.length;\n      gameState.currentCard = this.currentCard;\n      gameState.turnNumber = this.turnNumber;\n      return gameState;\n    }\n  }, {\n    key: \"bullshitStateForPlayer\",\n    value: function bullshitStateForPlayer(player, numberOfCardsPlayed) {\n      var state = this.gameStateForPlayer(player);\n      state.playerTurn = this.indexOfPlayerInRelationToCurrentPlayer(this.turn, player);\n      state.numberOfCardsPlayed = numberOfCardsPlayed;\n      return state;\n    }\n  }, {\n    key: \"summaryState\",\n    value: function summaryState(player, cardsPlayed, bullshitCalled, callingPlayer, playerLied) {\n      var state = this.bullshitStateForPlayer(player, cardsPlayed.length);\n      state.bullshitCalled = bullshitCalled;\n      state.callingPlayer = callingPlayer;\n      state.playerLied = playerLied;\n      var revealCards = bullshitCalled || player === this.turn;\n      state.actualCards = revealCards ? cardsPlayed : [];\n      return state;\n    }\n  }, {\n    key: \"playGame\",\n    value: function playGame() {\n      var _this = this;\n\n      return this.playTurn().then(function (result) {\n        var winner = _this.gameWon();\n\n        if (winner >= 0) {\n          return winner;\n        } else if (_this.gameDrawn()) {\n          return -1;\n        } else {\n          return _this.playGame();\n        }\n      });\n    }\n  }, {\n    key: \"gameWon\",\n    value: function gameWon() {\n      for (var i = 0; i < this.hands.length; i++) {\n        if (this.hands[i].count() == 0) {\n          return i;\n        }\n      }\n\n      return -1;\n    }\n  }, {\n    key: \"gameDrawn\",\n    value: function gameDrawn() {\n      if (this.turnNumber > 10000) {\n        return true;\n      }\n\n      return this.hands[0].drawnHand() && this.hands[1].drawnHand() && this.hands[2].drawnHand() && this.hands[3].drawnHand();\n    }\n  }, {\n    key: \"playTurn\",\n    value: function playTurn() {\n      var _this2 = this;\n\n      if (!this.turnNumber) {\n        this.turnNumber = 0;\n      }\n\n      this.turnNumber++;\n      var gameState = this.gameStateForPlayer(this.turn); // Ask the player what he wants to do\n\n      return this.players[this.turn].playHand(gameState).then(function (discardedCards) {\n        assert(Array.isArray(discardedCards), 'discardedCards isnt an array: ' + discardedCards + ' playing: ' + _this2.turn);\n        assert(discardedCards.length > 0, 'player: ' + _this2.turn + ' returned no cards for a play.');\n        var hand = _this2.hands[_this2.turn]; // console.log('played: ' + discardedCards)\n        // Discard the cards\n\n        for (var i = 0; i < discardedCards.length; i++) {\n          var card = discardedCards[i];\n          assert(hand[card] > 0, 'Card doesnt exist in hand: ' + card + ' hand: ' + hand);\n          hand[card]--;\n\n          _this2.discard.push(card);\n        }\n\n        return _this2.askEachPlayerForBullshit(discardedCards).then(function () {\n          // Advance gamestate\n          _this2.turn++;\n          _this2.turn = _this2.turn % 4;\n          _this2.currentCard++;\n\n          if (_this2.currentCard > 13) {\n            _this2.currentCard = 1;\n          }\n        });\n      });\n    }\n  }, {\n    key: \"askEachPlayerForBullshit\",\n    value: function askEachPlayerForBullshit(discardedCards) {\n      var _this3 = this;\n\n      var otherPlayers = [this.players[this.adjustedIndexForPlayerGivenTurn(this.turn, 1)], this.players[this.adjustedIndexForPlayerGivenTurn(this.turn, 2)], this.players[this.adjustedIndexForPlayerGivenTurn(this.turn, 3)]];\n      return this.askForBullshit(discardedCards.length, 0, otherPlayers).then(function (result) {\n        var bullshitCalled = result !== -1;\n        var playerLied = false;\n\n        if (bullshitCalled) {\n          if (_this3.validPlay(discardedCards)) {\n            var losingPlayerActualIndex = _this3.originalIndexFromAdjustedIndex(_this3.turn, result);\n\n            _this3.hands[losingPlayerActualIndex].addCards(_this3.discard);\n\n            _this3.discard = [];\n          } else {\n            playerLied = true;\n\n            _this3.hands[_this3.turn].addCards(_this3.discard);\n\n            _this3.discard = [];\n          }\n        }\n\n        var callingPlayerIndex = bullshitCalled ? _this3.originalIndexFromAdjustedIndex(_this3.turn, result) : 0;\n        return _this3.informPlayersOfRoundSummary(0, discardedCards, bullshitCalled, callingPlayerIndex, playerLied);\n      });\n    }\n  }, {\n    key: \"informPlayersOfRoundSummary\",\n    value: function informPlayersOfRoundSummary(playerIndex, cardsPlayed, bullshitCalled, callingPlayer, playerLied) {\n      var _this4 = this;\n\n      var callingPlayerAdjusted = bullshitCalled ? this.indexOfPlayerInRelationToCurrentPlayer(callingPlayer, playerIndex) : 0;\n      var state = this.summaryState(playerIndex, cardsPlayed, bullshitCalled, callingPlayerAdjusted, playerLied); // if (playerIndex === 0) {\n      //     console.log(state)\n      // }\n\n      return this.players[playerIndex].roundSummary(state).then(function () {\n        if (playerIndex + 1 < 4) {\n          return _this4.informPlayersOfRoundSummary(playerIndex + 1, cardsPlayed, bullshitCalled, callingPlayer, playerLied);\n        }\n      });\n    }\n  }, {\n    key: \"askForBullshit\",\n    value: function askForBullshit(numberOfCardsPlayed, index, players) {\n      var _this5 = this;\n\n      var currentPlayerIndex = this.originalIndexFromAdjustedIndex(this.turn, index);\n      return players[index].callBullshit(this.bullshitStateForPlayer(currentPlayerIndex, numberOfCardsPlayed)).then(function (result) {\n        if (result) {\n          return index;\n        } else {\n          if (index + 1 < players.length) {\n            return _this5.askForBullshit(numberOfCardsPlayed, index + 1, players);\n          } else {\n            return -1;\n          }\n        }\n      });\n    }\n  }, {\n    key: \"validPlay\",\n    value: function validPlay(discardedCards) {\n      for (var i = 0; i < discardedCards.length; i++) {\n        if (discardedCards[i] != this.currentCard) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"indexOfPlayerInRelationToCurrentPlayer\",\n    value: function indexOfPlayerInRelationToCurrentPlayer(actualIndex, currentPlayerIndex) {\n      // You want to find the difference between the current player and the actual player\n      // Add 4 because otherwise, it could be negative\n      return (4 + (actualIndex - currentPlayerIndex)) % 4;\n    }\n  }, {\n    key: \"adjustedIndexForPlayerGivenTurn\",\n    value: function adjustedIndexForPlayerGivenTurn(turn, index) {\n      return (turn + index) % 4;\n    }\n  }, {\n    key: \"originalIndexFromAdjustedIndex\",\n    value: function originalIndexFromAdjustedIndex(turn, index) {\n      return (turn + index + 1) % 4;\n    }\n  }]);\n\n  return Game;\n}();\n\nvar Hand =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function Hand() {\n    _classCallCheck(this, Hand);\n  }\n\n  _createClass(Hand, [{\n    key: \"count\",\n    value: function count() {\n      var total = 0;\n\n      for (var i = 1; i <= 13; i++) {\n        total += this[i];\n      }\n\n      return total;\n    }\n  }, {\n    key: \"drawnHand\",\n    value: function drawnHand() {\n      for (var i = 1; i <= 13; i++) {\n        if (this[i] != 4 || this[i] !== 0) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"addCards\",\n    value: function addCards(cards) {\n      var _this6 = this;\n\n      cards.forEach(function (card) {\n        _this6[card]++;\n      });\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return '' + this.toArray();\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      var cards = [];\n\n      for (var i = 1; i <= 13; i++) {\n        for (var j = 0; j < this[i]; j++) {\n          cards.push(i);\n        }\n      }\n\n      return cards;\n    }\n  }]);\n\n  return Hand;\n}();\n\nvar Deck =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function Deck() {\n    _classCallCheck(this, Deck);\n\n    this.cards = [];\n\n    for (var i = 1; i <= 13; i++) {\n      for (var j = 0; j < 4; j++) {\n        this.cards.push(i);\n      }\n    }\n  }\n\n  _createClass(Deck, [{\n    key: \"dealHands\",\n    value: function dealHands() {\n      var hands = [];\n\n      for (var n = 0; n < 4; n++) {\n        var hand = new Hand();\n\n        for (var i = 1; i <= 13; i++) {\n          hand[i] = 0;\n        }\n\n        for (var cardIndex = n * 13; cardIndex < (n + 1) * 13; cardIndex++) {\n          hand[this.cards[cardIndex]]++;\n        }\n\n        hands.push(hand);\n      }\n\n      return hands;\n    }\n  }, {\n    key: \"shuffle\",\n    value: function shuffle() {\n      var newCards = [];\n\n      while (this.cards.length > 0) {\n        var index = this.randomIndex();\n        newCards.push(this.cards[index]);\n        this.cards.splice(index, 1);\n      }\n\n      this.cards = newCards;\n    }\n  }, {\n    key: \"randomIndex\",\n    value: function randomIndex() {\n      return Math.floor(Math.random() * this.cards.length);\n    }\n  }]);\n\n  return Deck;\n}();\n\nmodule.exports.Game = Game;","var _get = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/get\");\n\nvar _toConsumableArray = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _possibleConstructorReturn = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _classCallCheck = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/createClass\");\n\nfunction alwaysCall(state) {\n  if (state.playerTurn == 3 && state.otherPlayerCards[2] === 0) {\n    return true;\n  } else if (state.numberOfCardsPlayed + state.hand[state.currentCard] > 4) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexports.NeverCall =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function NeverCall() {\n    _classCallCheck(this, NeverCall);\n  }\n\n  _createClass(NeverCall, [{\n    key: \"callBullshit\",\n    value: function callBullshit(state) {\n      if (alwaysCall(state)) {\n        return true;\n      }\n\n      return false;\n    }\n  }]);\n\n  return NeverCall;\n}();\n\nvar CallPercentage =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function CallPercentage(percentage) {\n    _classCallCheck(this, CallPercentage);\n\n    this.percentage = percentage;\n  }\n\n  _createClass(CallPercentage, [{\n    key: \"callBullshit\",\n    value: function callBullshit(state) {\n      if (alwaysCall(state)) {\n        return true;\n      }\n\n      return Math.random() < this.percentage;\n    }\n  }]);\n\n  return CallPercentage;\n}();\n\nexports.Call10Percent =\n/*#__PURE__*/\nfunction (_CallPercentage) {\n  \"use strict\";\n\n  _inherits(Lie10Percent, _CallPercentage);\n\n  function Lie10Percent() {\n    _classCallCheck(this, Lie10Percent);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Lie10Percent).call(this, 0.1));\n  }\n\n  return Lie10Percent;\n}(CallPercentage);\n\nexports.Call50Percent =\n/*#__PURE__*/\nfunction (_CallPercentage2) {\n  \"use strict\";\n\n  _inherits(Lie10Percent, _CallPercentage2);\n\n  function Lie10Percent() {\n    _classCallCheck(this, Lie10Percent);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Lie10Percent).call(this, 0.5));\n  }\n\n  return Lie10Percent;\n}(CallPercentage);\n\nexports.CallIfLieNeeded =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function CallIfLieNeeded() {\n    _classCallCheck(this, CallIfLieNeeded);\n  }\n\n  _createClass(CallIfLieNeeded, [{\n    key: \"callBullshit\",\n    value: function callBullshit(state) {\n      if (alwaysCall(state)) {\n        return true;\n      }\n\n      var imNext = state.playerTurn === 3;\n      var nextCard = state.currentCard + 1;\n\n      if (nextCard > 13) {\n        nextCard = 13;\n      }\n\n      if (imNext && state.hand[nextCard] === 0) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }]);\n\n  return CallIfLieNeeded;\n}();\n/**\n * Starts with a chance of calling out each player. Then, doubles this every time the player lies and halves it when they don't lie.\n */\n\n\nexports.CallUpdatingPercentage =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function CallUpdatingPercentage() {\n    _classCallCheck(this, CallUpdatingPercentage);\n\n    this.percentages = {\n      1: 0.1,\n      2: 0.1,\n      3: 0.1\n    };\n  }\n\n  _createClass(CallUpdatingPercentage, [{\n    key: \"callBullshit\",\n    value: function callBullshit(state) {\n      if (alwaysCall(state)) {\n        return true;\n      }\n\n      return Math.random() < this.percentages[state.playerTurn];\n    }\n  }, {\n    key: \"roundSummary\",\n    value: function roundSummary(summary) {\n      if (summary.bullshitCalled) {\n        if (summary.playerLied) {\n          this.percentages[summary.playerTurn] *= 2;\n        } else {\n          this.percentages[summary.playerTurn] /= 2;\n        }\n      }\n    }\n  }]);\n\n  return CallUpdatingPercentage;\n}();\n\nexports.CallUpdatingPercentageOnWinner =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function CallUpdatingPercentageOnWinner() {\n    _classCallCheck(this, CallUpdatingPercentageOnWinner);\n\n    this.percentages = {\n      1: 0.025,\n      2: 0.025,\n      3: 0.025\n    };\n  }\n\n  _createClass(CallUpdatingPercentageOnWinner, [{\n    key: \"callBullshit\",\n    value: function callBullshit(state) {\n      if (alwaysCall(state)) {\n        return true;\n      }\n\n      var allHands = state.otherPlayerCards;\n      allHands.push(state.hand.count());\n      var winningNumberOfCards = Math.min.apply(Math, _toConsumableArray(allHands));\n      var againstWinner = state.otherPlayerCards[state.playerTurn - 1] !== winningNumberOfCards;\n      var multiplier = againstWinner ? 4 : 1;\n      return Math.random() < this.percentages[state.playerTurn] * multiplier;\n    }\n  }, {\n    key: \"roundSummary\",\n    value: function roundSummary(summary) {\n      if (summary.bullshitCalled) {\n        if (summary.playerLied) {\n          this.percentages[summary.playerTurn] *= 2;\n        } else {\n          this.percentages[summary.playerTurn] /= 2;\n        }\n      }\n    }\n  }]);\n\n  return CallUpdatingPercentageOnWinner;\n}();\n\nexports.CallPercentageOnWinner =\n/*#__PURE__*/\nfunction (_CallPercentage3) {\n  \"use strict\";\n\n  _inherits(CallPercentageOnWinner, _CallPercentage3);\n\n  function CallPercentageOnWinner() {\n    _classCallCheck(this, CallPercentageOnWinner);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CallPercentageOnWinner).call(this, 0.1));\n  }\n\n  _createClass(CallPercentageOnWinner, [{\n    key: \"callBullshit\",\n    value: function callBullshit(state) {\n      if (alwaysCall(state)) {\n        return true;\n      }\n\n      var allHands = state.otherPlayerCards;\n      allHands.push(state.hand.count());\n      var winningNumberOfCards = Math.min.apply(Math, _toConsumableArray(allHands));\n\n      if (state.otherPlayerCards[state.playerTurn - 1] !== winningNumberOfCards) {\n        return false;\n      } else {\n        return _get(_getPrototypeOf(CallPercentageOnWinner.prototype), \"callBullshit\", this).call(this, state);\n      }\n    }\n  }]);\n\n  return CallPercentageOnWinner;\n}(CallPercentage);\n\nexports.Collector =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function Collector() {\n    _classCallCheck(this, Collector);\n  }\n\n  _createClass(Collector, [{\n    key: \"callBullshit\",\n    value: function callBullshit(state) {\n      if (alwaysCall(state)) {\n        return true;\n      }\n\n      if (state.hand[state.currentCard] + state.numberOfCardsPlayed === 4) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }]);\n\n  return Collector;\n}();\n\nfunction chanceOfHavingASpecificCard(handSize, cardsLeft, numberOfSpecificCards, deckSize) {\n  if (handSize - numberOfSpecificCards < 0) {\n    return 0;\n  }\n\n  var totalPossibleHands = choose(deckSize, handSize);\n  var numberOfHandsWithNoCards = deckSize - cardsLeft >= handSize ? choose(deckSize - cardsLeft, handSize) : 0;\n  var probabilityOfNoCards = numberOfHandsWithNoCards / totalPossibleHands;\n  var probabilityOfMoreThanOneCard = 1 - probabilityOfNoCards;\n\n  if (numberOfSpecificCards === 1) {\n    return probabilityOfMoreThanOneCard;\n  } else {\n    var totalHandsWithExactlyOneCard = choose(cardsLeft, 1) * choose(deckSize - cardsLeft, handSize - 1);\n    var probabilityOfExactlyOneCard = totalHandsWithExactlyOneCard / totalPossibleHands;\n\n    var _probabilityOfNoCards = 1 - chanceOfHavingASpecificCard(handSize, cardsLeft, 1, deckSize);\n\n    if (numberOfSpecificCards === 2) {\n      return 1 - _probabilityOfNoCards - probabilityOfExactlyOneCard;\n    } else if (numberOfSpecificCards === 3) {\n      var totalHandsWithExactlyTwoCards = choose(cardsLeft, 2) * choose(deckSize - cardsLeft, handSize - 2);\n      var probabilityOfExactlyTwoCards = totalHandsWithExactlyTwoCards / totalPossibleHands;\n      return 1 - _probabilityOfNoCards - probabilityOfExactlyOneCard - probabilityOfExactlyTwoCards;\n    } else {\n      // If they are claiming 4 of a kind, wait for someone else to call bullshit\n      return 1;\n    }\n  }\n}\n\nexports.CallUnlikely =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function CallUnlikely() {\n    _classCallCheck(this, CallUnlikely);\n  }\n\n  _createClass(CallUnlikely, [{\n    key: \"callBullshit\",\n    value: function callBullshit(state) {\n      if (alwaysCall(state)) {\n        return true;\n      }\n\n      var hand = state.hand;\n      var currentCard = state.currentCard;\n      var numberOfCardsPlayed = state.numberOfCardsPlayed;\n      var playerCards = state.otherPlayerCards[state.playerTurn - 1];\n      return chanceOfHavingASpecificCard(playerCards, 4 - hand[currentCard], numberOfCardsPlayed, 52 - hand.count()) < 0.1;\n    }\n  }]);\n\n  return CallUnlikely;\n}();\n\nfunction factorial(x) {\n  if (x <= 0) {\n    return 1;\n  }\n\n  return x * factorial(x - 1);\n}\n\nfunction choose(n, k) {\n  return factorial(n) / (factorial(k) * factorial(n - k));\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { Game } from 'cl/game'\nimport { Player, SyncPlayer } from 'cl/player'\nimport { NeverCall, CallUpdatingPercentage, CallPercentageOnWinner, CallIfLieNeeded } from 'cl/callFunctions'\nimport { AvoidLying, RallyCloser, Lie10Percent, RallyTime, AlwaysLie } from 'cl/playFunctions'\n\nconst playingStrategies = {\n  'AlwaysLie': AlwaysLie,\n  'AvoidLying': AvoidLying,\n  'RallyCloser': RallyCloser,\n  'Lie10Percent': Lie10Percent\n}\n\nconst callingStrategies = {\n  'NeverCall': NeverCall,\n  'CallUpdatingPercentage': CallUpdatingPercentage,\n  'CallPercentageOnWinner': CallPercentageOnWinner,\n  'CallIfLieNeeded': CallIfLieNeeded\n}\n\nclass HumanPlayer extends Player {\n  constructor(onStateChange) {\n    super()\n\n    this.onStateChange = onStateChange\n  }\n\n  playHand(state) {\n    return new Promise((resolve) => {\n      state.playing = true\n      state.summary = false\n      state.cardsToPlay = []\n      this.onStateChange(state)\n      this.resolvePlayHand = resolve\n    })\n  }\n\n  callBullshit(state) {\n    return new Promise((resolve) => {\n      state.playing = false\n      state.summary = false\n      this.onStateChange(state)\n      this.resolveCallBullshit = resolve\n    })\n  }\n\n  roundSummary(summary) {\n    return new Promise((resolve) => {\n      summary.playing = false\n      summary.summary = true\n      this.onStateChange(summary)\n      this.resolveSummary = resolve\n    })\n  }\n}\n\nclass GameComponenet extends Component {\n  constructor(props) {\n    super(props)\n\n    this.stateChanged = this.stateChanged.bind(this)\n\n    this.state = {}\n  }\n\n  stateChanged(state) {\n    state.hand = state.hand.toArray()\n    this.setState(state)\n  }\n\n  componentDidMount() {\n    this.startNewGame()\n  }\n\n  startNewGame() {\n    const goodPlayingStrategies = [\n      'AlwaysLie',\n      'AvoidLying',\n      'RallyCloser',\n      'Lie10Percent'\n    ]\n\n    const goodCallingStrategies = [\n      'NeverCall',\n      'CallUpdatingPercentage',\n      'CallPercentageOnWinner',\n      'CallIfLieNeeded'\n    ]\n\n    function randomArrayElement(array) {\n      return array[Math.floor(Math.random() * array.length)]\n    }\n\n    const otherPlayerStrategies = [\n      {\n        play: randomArrayElement(goodPlayingStrategies),\n        call: randomArrayElement(goodCallingStrategies),\n      },\n      {\n        play: randomArrayElement(goodPlayingStrategies),\n        call: randomArrayElement(goodCallingStrategies),\n      },\n      {\n        play: randomArrayElement(goodPlayingStrategies),\n        call: randomArrayElement(goodCallingStrategies),\n      }\n    ]\n\n    const player = new HumanPlayer(this.stateChanged)\n    const player2 = new SyncPlayer(new playingStrategies[otherPlayerStrategies[0].play](), new callingStrategies[otherPlayerStrategies[0].call]())\n    const player3 = new SyncPlayer(new playingStrategies[otherPlayerStrategies[1].play](), new callingStrategies[otherPlayerStrategies[1].call]())\n    const player4 = new SyncPlayer(new playingStrategies[otherPlayerStrategies[2].play](), new callingStrategies[otherPlayerStrategies[2].call]())\n\n    const game = new Game([player, player2, player3, player4])\n    game.playGame().then((winningPlayer) => {\n      this.setState({\n        winningPlayer: winningPlayer,\n        gameOver: true\n      })\n    })\n\n    this.setState({\n      player: player,\n      game: game,\n      winningPlayer: undefined,\n      gameOver: false,\n      otherPlayerStrategies: otherPlayerStrategies\n    })\n  }\n\n  cardsToAdd(cards) {\n    const cardLinks = cards.map((card, index) => {\n      return (\n        <button onClick={() => {\n          var hand = this.state.hand\n          hand.splice(index, 1)\n          var cardsToPlay = this.state.cardsToPlay || []\n          cardsToPlay.push(card)\n          this.setState({\n            hand: hand,\n            cardsToPlay: cardsToPlay\n          })\n        }}\n          key={index}>{card}</button>\n      )\n    })\n\n    return (\n      <div>\n        {cardLinks}\n      </div>\n    )\n  }\n\n  cardsToRemove(cards) {\n    const cardLinks = cards.map((card, index) => {\n      return (\n        <button onClick={() => {\n          var hand = this.state.hand\n          hand.push(card)\n          var cardsToPlay = this.state.cardsToPlay || []\n          cardsToPlay.splice(index, 1)\n          this.setState({\n            hand: hand,\n            cardsToPlay: cardsToPlay\n          })\n        }}\n          key={index}>{card}</button>\n      )\n    })\n\n    return (\n      <div>\n        {cardLinks}\n      </div>\n    )\n  }\n\n  playCardsComponent() {\n    var playCards\n    if (this.state.cardsToPlay.length > 0) {\n      playCards = (\n        <div>\n          <button onClick={() => { this.state.player.resolvePlayHand(this.state.cardsToPlay) }}>Play Cards!</button>\n        </div>\n      )\n    } else {\n      playCards = (<div></div>)\n    }\n\n    var hand = this.cardsToAdd(this.state.hand || [])\n\n    return (\n      <div>\n        <div>\n          Your hand: {hand}\n        </div>\n        <div>\n          Discard size: {this.state.discardSize}\n        </div>\n        <div>\n          Player 2 has {this.state.otherPlayerCards[0]} cards. Player 3 has {this.state.otherPlayerCards[1]} cards. Player 4 has {this.state.otherPlayerCards[2]} cards.\n        </div>\n        <div>\n          Current card: {this.state.currentCard}\n        </div>\n        <div>\n          Tap cards to add them to your hand.\n      </div>\n        <div>\n          You are about to play: {this.cardsToRemove(this.state.cardsToPlay || [])}\n        </div>\n        {playCards}\n      </div>\n    )\n  }\n\n  summaryComponent() {\n    var text\n    var playingPlayer = this.state.playerTurn + 1\n    if (this.state.bullshitCalled) {\n      var callingPlayer = this.state.callingPlayer + 1\n      text = 'On the last turn, bullshit was called by player ' + callingPlayer + '. '\n      if (this.state.playerLied) {\n        text += 'The player was lying and actually played: ' + this.state.actualCards\n      } else {\n        text += 'The player was telling the truth! (' + this.state.actualCards + '). Player ' + callingPlayer + ' has to pick up the discard pile.'\n      }\n    } else {\n      text = 'On the last turn, player ' + playingPlayer + ' played ' + this.state.numberOfCardsPlayed + ' cards and no-one called bullshit.'\n    }\n    return (\n      <div>\n        <div>\n          Current card: {this.state.currentCard}\n        </div>\n        <div>\n          {text}\n        </div>\n        <div>\n          Discard size: {this.state.discardSize}\n        </div>\n        <div>\n          <button onClick={() => { this.state.player.resolveSummary() }}>OK</button>\n        </div>\n      </div>\n    )\n  }\n\n  bullshitComponent() {\n    return (\n      <div>\n        <div>\n          Do you want to call bullshit on player {this.state.playerTurn + 1}?\n          </div>\n        <div>\n          Your hand: {'' + this.state.hand}\n        </div>\n        <div>\n          Current card: {this.state.currentCard}\n        </div>\n        <div>\n          Number of cards played: {this.state.numberOfCardsPlayed}\n        </div>\n        <div>\n          Player 2 has {this.state.otherPlayerCards[0]} cards. Player 3 has {this.state.otherPlayerCards[1]} cards. Player 4 has {this.state.otherPlayerCards[2]} cards.\n        </div>\n        <div>\n          Discard size: {this.state.discardSize}\n        </div>\n        <div>\n          <button onClick={() => { this.state.player.resolveCallBullshit(true) }}>Yes!</button>\n          <button onClick={() => { this.state.player.resolveCallBullshit(false) }}>No...</button>\n        </div>\n      </div>\n    )\n  }\n\n  opponentDescription(index) {\n    const playingDescription = {\n      'AvoidLying': 'Avoids lying whenever possible',\n      'RallyCloser': \"If they can win without lying, they don't lie. Otherwise, they lie only when they are losing\",\n      'Lie10Percent': \"Lies ten percent of the time\",\n      'AlwaysLie': \"Always lies\"\n    }\n    \n    const callingDescriptions = {\n      'NeverCall': 'never calls bullshit unless they would immediately lose.',\n      'CallUpdatingPercentage': 'keeps track of how many people lie and calls bullshit if they lie often.',\n      'CallPercentageOnWinner': 'only calls bullshit on the winner every so often.',\n      'CallIfLieNeeded': 'only calls bullshit if they would need to lie on their next turn.'\n    }\n    \n    const opponent = this.state.otherPlayerStrategies[index]\n\n    const text = playingDescription[opponent.play] + ', and ' + callingDescriptions[opponent.call]\n\n    return text\n  }\n\n  playingAgainst() {\n    return (\n      <div>\n        <div>\n          You were playing against:\n        </div>\n        <div>\n          Player 2: {this.opponentDescription(0)}\n        </div>\n        <div>\n          Player 3: {this.opponentDescription(1)}\n        </div>\n        <div>\n          Player 4: {this.opponentDescription(2)}\n        </div>\n      </div>\n    )\n  }\n\n  render() {\n    if (this.state.gameOver) {\n      var winText\n      if (this.state.winningPlayer === 0) {\n        winText = 'You won! Contrats :D.'\n      } else {\n        var player = this.state.winningPlayer + 1\n        winText = 'Player ' + player + ' won the game. Sorry, you lost.'\n      }\n\n      return (\n        <div>\n          <div>\n            {winText}\n          </div>\n          {this.playingAgainst()}\n          <div>\n            <button onClick={() => { this.startNewGame() }}>Play again</button>\n          </div>\n        </div>\n      )\n    } else if (!this.state.hand) {\n      return (\n        <div>Loading...</div>\n      )\n    }\n\n    var mainComponent\n\n    if (this.state.playing) {\n      mainComponent = this.playCardsComponent()\n    } else if (this.state.summary) {\n      mainComponent = this.summaryComponent()\n    } else {\n      mainComponent = this.bullshitComponent()\n    }\n\n    return (\n      <div>\n        {mainComponent}\n      </div>\n    )\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n  }\n\n  startGame() {\n    this.setState({ playingGame: true })\n  }\n\n  render() {\n    var mainContent\n\n    if (this.state.playingGame) {\n      mainContent = (\n        <div>\n          <GameComponenet />\n        </div>\n      )\n    } else {\n      mainContent = (\n        <div>\n          <button onClick={() => { this.startGame() }}>Start Game</button>\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>BS</h1>\n        </header>\n        {mainContent}\n      </div>\n    );\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","var _get = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/get\");\n\nvar _possibleConstructorReturn = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _classCallCheck = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/createClass\");\n\nvar assert = require('assert');\n\nexports.AvoidLying =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function AvoidLying() {\n    _classCallCheck(this, AvoidLying);\n  }\n\n  _createClass(AvoidLying, [{\n    key: \"playHand\",\n    value: function playHand(state) {\n      var cards = [];\n\n      for (var i = 0; i < state.hand[state.currentCard]; i++) {\n        cards.push(state.currentCard);\n      }\n\n      if (cards.length > 0) {\n        return cards;\n      } else {\n        return [ideaLyingCardFromHand(state.hand, state.currentCard)];\n      }\n    }\n  }]);\n\n  return AvoidLying;\n}();\n\nvar LiePercentage =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function LiePercentage(percentage) {\n    _classCallCheck(this, LiePercentage);\n\n    this.percentage = percentage;\n  }\n\n  _createClass(LiePercentage, [{\n    key: \"playHand\",\n    value: function playHand(state) {\n      var cards = [];\n\n      for (var i = 0; i < state.hand[state.currentCard]; i++) {\n        cards.push(state.currentCard);\n      }\n\n      state.hand[state.currentCard] = 0;\n\n      if (cards.length > 0) {\n        if (Math.random() < this.percentage && state.hand.count() > 1 && cards.length < 3) {\n          cards.push(ideaLyingCardFromHand(state.hand, state.currentCard));\n        }\n\n        return cards;\n      } else {\n        return [ideaLyingCardFromHand(state.hand, state.currentCard)];\n      }\n    }\n  }]);\n\n  return LiePercentage;\n}();\n\nexports.AlwaysLieOnSingles =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function AlwaysLieOnSingles() {\n    _classCallCheck(this, AlwaysLieOnSingles);\n  }\n\n  _createClass(AlwaysLieOnSingles, [{\n    key: \"playHand\",\n    value: function playHand(state) {\n      var cards = [];\n\n      for (var i = 0; i < state.hand[state.currentCard]; i++) {\n        cards.push(state.currentCard);\n      }\n\n      state.hand[state.currentCard] = 0;\n\n      if (state.hand.count() > 0 && cards.length <= 1) {\n        cards.push(ideaLyingCardFromHand(state.hand, state.currentCard));\n      }\n\n      return cards;\n    }\n  }]);\n\n  return AlwaysLieOnSingles;\n}();\n\nexports.Lie10Percent =\n/*#__PURE__*/\nfunction (_LiePercentage) {\n  \"use strict\";\n\n  _inherits(Lie10Percent, _LiePercentage);\n\n  function Lie10Percent() {\n    _classCallCheck(this, Lie10Percent);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Lie10Percent).call(this, 0.1));\n  }\n\n  return Lie10Percent;\n}(LiePercentage);\n\nexports.Lie50Percent =\n/*#__PURE__*/\nfunction (_LiePercentage2) {\n  \"use strict\";\n\n  _inherits(Lie10Percent, _LiePercentage2);\n\n  function Lie10Percent() {\n    _classCallCheck(this, Lie10Percent);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Lie10Percent).call(this, 0.5));\n  }\n\n  return Lie10Percent;\n}(LiePercentage);\n\nexports.AlwaysLie =\n/*#__PURE__*/\nfunction (_LiePercentage3) {\n  \"use strict\";\n\n  _inherits(AlwaysLie, _LiePercentage3);\n\n  function AlwaysLie() {\n    _classCallCheck(this, AlwaysLie);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(AlwaysLie).call(this, 1));\n  }\n\n  return AlwaysLie;\n}(LiePercentage);\n\nvar ExpectedValueLiar =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function ExpectedValueLiar() {\n    _classCallCheck(this, ExpectedValueLiar);\n\n    // Initialize each probability with 50%\n    this.oneCard = {\n      bsCalled: 1,\n      bsNotCalled: 1\n    };\n    this.twoCards = {\n      bsCalled: 1,\n      bsNotCalled: 1\n    };\n    this.threeCards = {\n      bsCalled: 1,\n      bsNotCalled: 1\n    };\n  }\n\n  _createClass(ExpectedValueLiar, [{\n    key: \"probabilityOfBS\",\n    value: function probabilityOfBS(numberOfCards) {\n      if (numberOfCards === 1) {\n        return this.oneCard.bsCalled / (this.oneCard.bsNotCalled + this.oneCard.bsCalled);\n      } else if (numberOfCards === 2) {\n        return this.twoCards.bsCalled / (this.twoCards.bsNotCalled + this.twoCards.bsCalled);\n      } else if (numberOfCards === 3) {\n        return this.threeCards.bsCalled / (this.threeCards.bsNotCalled + this.threeCards.bsCalled);\n      } else {\n        assert('number of cards is not 1, 2 or 3');\n        return 1;\n      }\n    }\n  }, {\n    key: \"expectedValue\",\n    value: function expectedValue(numberOfCards, discardSize, bluffing) {\n      if (!bluffing) {\n        // You will always get rid of exactly these cards\n        return numberOfCards;\n      } else {\n        var chanceOfBS = this.probabilityOfBS(numberOfCards);\n        return (1 - chanceOfBS) * numberOfCards - chanceOfBS * discardSize;\n      }\n    }\n  }, {\n    key: \"playHand\",\n    value: function playHand(state) {\n      var cards = [];\n\n      for (var i = 0; i < state.hand[state.currentCard]; i++) {\n        cards.push(state.currentCard);\n      }\n\n      state.hand[state.currentCard] = 0;\n\n      if (cards.length === 4) {\n        return cards;\n      }\n\n      var expectedValueForOneCard = this.expectedValue(1, state.discardSize, cards.length < 1);\n      var expectedValueForTwoCards = this.expectedValue(2, state.discardSize, cards.length < 2);\n      var expectedValueForThreeCards = this.expectedValue(3, state.discardSize, cards.length < 3);\n      var extraCards = 0;\n\n      if (expectedValueForOneCard > expectedValueForTwoCards && expectedValueForOneCard > expectedValueForThreeCards) {\n        extraCards = 1 - cards.length;\n      } else if (expectedValueForTwoCards > expectedValueForOneCard && expectedValueForTwoCards > expectedValueForThreeCards) {\n        extraCards = 2 - cards.length;\n      } else {\n        // Let's do three cards\n        extraCards = 3 - cards.length;\n      }\n\n      for (var i = 0; i < extraCards; i++) {\n        if (state.hand.count() > 0 && cards.length < 4) {\n          var card = ideaLyingCardFromHand(state.hand, state.currentCard);\n          cards.push(ideaLyingCardFromHand(state.hand, state.currentCard));\n          state.hand[card]--;\n        }\n      }\n\n      return cards;\n    }\n  }, {\n    key: \"roundSummary\",\n    value: function roundSummary(summary) {\n      if (summary.bullshitCalled && summary.callingPlayer === 0) {\n        // Bullshit was called by me, so don't count this towards totals\n        return;\n      }\n\n      if (summary.numberOfCardsPlayed === 1) {\n        if (summary.bullshitCalled) {\n          this.oneCard.bsCalled++;\n        } else {\n          this.oneCard.bsNotCalled++;\n        }\n      } else if (summary.numberOfCardsPlayed === 2) {\n        if (summary.bullshitCalled) {\n          this.twoCards.bsCalled++;\n        } else {\n          this.twoCards.bsNotCalled++;\n        }\n      } else if (summary.numberOfCardsPlayed === 3) {\n        if (summary.bullshitCalled) {\n          this.threeCards.bsCalled++;\n        } else {\n          this.threeCards.bsNotCalled++;\n        }\n      }\n    }\n  }]);\n\n  return ExpectedValueLiar;\n}();\n\nexports.ExpectedValueLiar = ExpectedValueLiar;\n\nexports.LyingCloser =\n/*#__PURE__*/\nfunction (_LiePercentage4) {\n  \"use strict\";\n\n  _inherits(LyingCloser, _LiePercentage4);\n\n  function LyingCloser() {\n    _classCallCheck(this, LyingCloser);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LyingCloser).call(this, 1));\n  }\n\n  _createClass(LyingCloser, [{\n    key: \"playHand\",\n    value: function playHand(state) {\n      var closing = canFinishWithoutLying(state.currentCard, state.hand, 0);\n      var cards = [];\n\n      for (var i = 0; i < state.hand[state.currentCard]; i++) {\n        cards.push(state.currentCard);\n      }\n\n      if (closing) {\n        return cards;\n      } else {\n        return _get(_getPrototypeOf(LyingCloser.prototype), \"playHand\", this).call(this, state);\n      }\n    }\n  }]);\n\n  return LyingCloser;\n}(LiePercentage);\n\nexports.Closer =\n/*#__PURE__*/\nfunction (_ExpectedValueLiar) {\n  \"use strict\";\n\n  _inherits(Closer, _ExpectedValueLiar);\n\n  function Closer() {\n    _classCallCheck(this, Closer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Closer).apply(this, arguments));\n  }\n\n  _createClass(Closer, [{\n    key: \"playHand\",\n    value: function playHand(state) {\n      var closing = canFinishWithoutLying(state.currentCard, state.hand, 0);\n      var cards = [];\n\n      for (var i = 0; i < state.hand[state.currentCard]; i++) {\n        cards.push(state.currentCard);\n      }\n\n      state.hand[state.currentCard] = 0;\n\n      if (cards.length === 4) {\n        return cards;\n      } else {\n        if (closing) {\n          return cards;\n        } else {\n          return _get(_getPrototypeOf(Closer.prototype), \"playHand\", this).call(this, state);\n        }\n      }\n    }\n  }]);\n\n  return Closer;\n}(ExpectedValueLiar);\n\nvar RallyTime =\n/*#__PURE__*/\nfunction (_LiePercentage5) {\n  \"use strict\";\n\n  _inherits(RallyTime, _LiePercentage5);\n\n  function RallyTime() {\n    _classCallCheck(this, RallyTime);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(RallyTime).call(this, 0));\n  }\n\n  _createClass(RallyTime, [{\n    key: \"playHand\",\n    value: function playHand(state) {\n      var numberOfBetterPlayers = 0;\n\n      if (state.hand.count() >= state.otherPlayerCards[0]) {\n        numberOfBetterPlayers++;\n      }\n\n      if (state.hand.count() >= state.otherPlayerCards[1]) {\n        numberOfBetterPlayers++;\n      }\n\n      if (state.hand.count() >= state.otherPlayerCards[2]) {\n        numberOfBetterPlayers++;\n      }\n\n      if (numberOfBetterPlayers === 3) {\n        this.percentage = 0.75;\n      } else if (numberOfBetterPlayers === 2) {\n        this.percentage = 0.15;\n      } else {\n        this.percentage = 0;\n      }\n\n      return _get(_getPrototypeOf(RallyTime.prototype), \"playHand\", this).call(this, state);\n    }\n  }]);\n\n  return RallyTime;\n}(LiePercentage);\n\nexports.RallyTime = RallyTime;\n\nexports.RallyCloser =\n/*#__PURE__*/\nfunction (_RallyTime) {\n  \"use strict\";\n\n  _inherits(RallyCloser, _RallyTime);\n\n  function RallyCloser() {\n    _classCallCheck(this, RallyCloser);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(RallyCloser).apply(this, arguments));\n  }\n\n  _createClass(RallyCloser, [{\n    key: \"playHand\",\n    value: function playHand(state) {\n      var closing = canFinishWithoutLying(state.currentCard, state.hand, 0);\n\n      if (closing) {\n        var cards = [];\n\n        for (var i = 0; i < state.hand[state.currentCard]; i++) {\n          cards.push(state.currentCard);\n        }\n\n        state.hand[state.currentCard] = 0;\n        assert(cards.length > 0, 'Closing thought he could close, but didnt have the current card - ' + state.currentCard + ' - ' + state.hand);\n        return cards;\n      } else {\n        return _get(_getPrototypeOf(RallyCloser.prototype), \"playHand\", this).call(this, state);\n      }\n    }\n  }]);\n\n  return RallyCloser;\n}(RallyTime);\n\nfunction ideaLyingCardFromHand(hand, currentTurn) {\n  if (hand.count() === 0) {\n    assert(false, 'empty hand in ideaLyingCardFromHand');\n  }\n\n  while (true) {\n    currentTurn -= 4;\n\n    if (currentTurn < 1) {\n      currentTurn += 13;\n    }\n\n    if (hand[currentTurn] > 0) {\n      return currentTurn;\n    }\n  }\n}\n\nfunction canFinishWithoutLying(currentCard, hand, numberOfCardsUsed) {\n  if (numberOfCardsUsed >= hand.count()) {\n    return true;\n  }\n\n  if (hand[currentCard] === 0) {\n    return false;\n  }\n\n  var nextCard = currentCard + 4;\n\n  if (nextCard > 13) {\n    nextCard -= 13;\n  }\n\n  return canFinishWithoutLying(nextCard, hand, numberOfCardsUsed + hand[currentCard]);\n}"],"sourceRoot":""}