{"version":3,"sources":["../../cl/player.js","../../cl/callFunctions.js","../../cl/game.js","../../cl/playFunctions.js","App.js","serviceWorker.js","index.js"],"names":["_possibleConstructorReturn","__webpack_require__","_getPrototypeOf","_inherits","_classCallCheck","_createClass","assert","Player","this","key","value","state","Promise","resolve","summary","SyncPlayer","_Player","playHandPlayer","callBullshitPlayer","_this","call","syncPlayHand","playHand","syncCallBullshit","callBullshit","syncRoundSummary","roundSummary","_this2","_this3","_this4","exports","_toConsumableArray","_get","alwaysCall","playerTurn","otherPlayerCards","numberOfCardsPlayed","hand","currentCard","NeverCall","CallPercentage","percentage","Math","random","factorial","x","choose","n","k","Call10Percent","_CallPercentage","Lie10Percent","Call50Percent","_CallPercentage2","CallIfLieNeeded","imNext","nextCard","CallUpdatingPercentage","percentages","1","2","3","bullshitCalled","playerLied","CallPercentageOnWinner","_CallPercentage3","allHands","push","count","winningNumberOfCards","min","apply","prototype","Collector","CallUnlikely","chanceOfHavingASpecificCard","handSize","cardsLeft","numberOfSpecificCards","deckSize","totalPossibleHands","numberOfHandsWithNoCards","probabilityOfExactlyOneCard","_probabilityOfNoCards","Game","players","deck","Deck","shuffle","hands","dealHands","discard","turn","player","gameState","adjustedIndexForPlayerGivenTurn","Object","assign","Hand","discardSize","length","gameStateForPlayer","indexOfPlayerInRelationToCurrentPlayer","cardsPlayed","callingPlayer","bullshitStateForPlayer","revealCards","actualCards","playTurn","then","result","winner","gameWon","gameDrawn","playGame","i","turnNumber","drawnHand","discardedCards","Array","isArray","card","askEachPlayerForBullshit","otherPlayers","askForBullshit","validPlay","losingPlayerActualIndex","originalIndexFromAdjustedIndex","addCards","callingPlayerIndex","informPlayersOfRoundSummary","playerIndex","callingPlayerAdjusted","summaryState","index","_this5","currentPlayerIndex","actualIndex","total","cards","_this6","forEach","toArray","j","cardIndex","newCards","randomIndex","splice","floor","module","AvoidLying","ideaLyingCardFromHand","LiePercentage","AlwaysLieOnSingles","_LiePercentage","Lie50Percent","_LiePercentage2","AlwaysLie","_LiePercentage3","ExpectedValueLiar","oneCard","bsCalled","bsNotCalled","twoCards","threeCards","numberOfCards","bluffing","chanceOfBS","probabilityOfBS","expectedValueForOneCard","expectedValue","expectedValueForTwoCards","expectedValueForThreeCards","extraCards","LyingCloser","_LiePercentage4","closing","canFinishWithoutLying","Closer","_ExpectedValueLiar","arguments","RallyTime","_LiePercentage5","numberOfBetterPlayers","currentTurn","numberOfCardsUsed","RallyCloser","_RallyTime","playingStrategies","callingStrategies","HumanPlayer","onStateChange","classCallCheck","possibleConstructorReturn","getPrototypeOf","playing","cardsToPlay","resolvePlayHand","resolveCallBullshit","resolveSummary","GameComponenet","props","stateChanged","bind","assertThisInitialized","setState","startNewGame","goodPlayingStrategies","goodCallingStrategies","randomArrayElement","array","otherPlayerStrategies","play","player2","player3","player4","game","winningPlayer","gameOver","undefined","_this7","cardLinks","map","react_default","a","createElement","onClick","_this8","playCards","_this9","cardsToAdd","cardsToRemove","text","_this10","playingPlayer","_this11","opponent","opponentDescription","mainComponent","_this12","winText","playingAgainst","playCardsComponent","summaryComponent","bullshitComponent","Component","App","_this13","playingGame","mainContent","_this14","App_GameComponenet","startGame","className","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2EAAA,IAAAA,EAAiCC,EAAQ,IAEzCC,EAAsBD,EAAQ,GAE9BE,EAAgBF,EAAQ,IAExBG,EAAsBH,EAAQ,GAE9BI,EAAmBJ,EAAQ,GAE3BK,EAAaL,EAAQ,IAErBM,EAEA,WACA,aAEA,SAAAA,IACAH,EAAAI,KAAAD,GAyBA,OAtBAF,EAAAE,EAAA,EACAE,IAAA,WACAC,MAAA,SAAAC,GACAL,GAAA,wCAEG,CACHG,IAAA,eACAC,MAAA,SAAAC,GAEA,OADAL,GAAA,sCACA,IAAAM,QAAA,SAAAC,GACAA,GAAA,OAGG,CACHJ,IAAA,eACAC,MAAA,SAAAI,GACA,WAAAF,QAAA,SAAAC,GACAA,UAKAN,EA7BA,GAgCAQ,EAEA,SAAAC,GACA,aAIA,SAAAD,EAAAE,EAAAC,GACA,IAAAC,EAwBA,OAtBAf,EAAAI,KAAAO,IAEAI,EAAAnB,EAAAQ,KAAAN,EAAAa,GAAAK,KAAAZ,QAEAa,aAAA,SAAAV,GACA,OAAAM,EAAAK,SAAAX,IAGAQ,EAAAI,iBAAA,SAAAZ,GACA,OAAAO,EAAAM,aAAAb,IAGAQ,EAAAM,iBAAA,SAAAX,GACAG,EAAAS,cACAT,EAAAS,aAAAZ,GAGAI,EAAAQ,cACAR,EAAAQ,aAAAZ,IAIAK,EAkCA,OA7DAhB,EAAAY,EA8DCR,GAhCDF,EAAAU,EAAA,EACAN,IAAA,WACAC,MAAA,SAAAC,GACA,IAAAgB,EAAAnB,KAEA,WAAAI,QAAA,SAAAC,GACAA,EAAAc,EAAAN,aAAAV,QAGG,CACHF,IAAA,eACAC,MAAA,SAAAC,GACA,IAAAiB,EAAApB,KAEA,WAAAI,QAAA,SAAAC,GACAA,EAAAe,EAAAL,iBAAAZ,QAGG,CACHF,IAAA,eACAC,MAAA,SAAAI,GACA,IAAAe,EAAArB,KAEA,WAAAI,QAAA,SAAAC,GACAgB,EAAAJ,iBAAAX,GAEAD,UAKAE,EAhEA,GAmEAe,EAAAvB,SACAuB,EAAAf,iCCpHA,IAAAgB,EAAyB9B,EAAQ,IAEjC+B,EAAW/B,EAAQ,IAEnBD,EAAiCC,EAAQ,IAEzCC,EAAsBD,EAAQ,GAE9BE,EAAgBF,EAAQ,IAExBG,EAAsBH,EAAQ,GAE9BI,EAAmBJ,EAAQ,GAE3B,SAAAgC,EAAAtB,GACA,UAAAA,EAAAuB,YAAA,IAAAvB,EAAAwB,iBAAA,IAEGxB,EAAAyB,oBAAAzB,EAAA0B,KAAA1B,EAAA2B,aAAA,EAOHR,EAAAS,UAEA,WACA,aAEA,SAAAA,IACAnC,EAAAI,KAAA+B,GAcA,OAXAlC,EAAAkC,EAAA,EACA9B,IAAA,eACAC,MAAA,SAAAC,GACA,QAAAsB,EAAAtB,OAQA4B,EAlBA,GAqBA,IAAAC,EAEA,WACA,aAEA,SAAAA,EAAAC,GACArC,EAAAI,KAAAgC,GAEAhC,KAAAiC,aAcA,OAXApC,EAAAmC,EAAA,EACA/B,IAAA,eACAC,MAAA,SAAAC,GACA,QAAAsB,EAAAtB,IAIA+B,KAAAC,SAAAnC,KAAAiC,eAIAD,EApBA,GA6PA,SAAAI,EAAAC,GACA,OAAAA,GAAA,EACA,EAGAA,EAAAD,EAAAC,EAAA,GAGA,SAAAC,EAAAC,EAAAC,GACA,OAAAJ,EAAAG,IAAAH,EAAAI,GAAAJ,EAAAG,EAAAC,IA/OAlB,EAAAmB,cAEA,SAAAC,GACA,aAIA,SAAAC,IAGA,OAFA/C,EAAAI,KAAA2C,GAEAnD,EAAAQ,KAAAN,EAAAiD,GAAA/B,KAAAZ,KAAA,KAGA,OARAL,EAAAgD,EASCX,GADDW,EAXA,GAcArB,EAAAsB,cAEA,SAAAC,GACA,aAIA,SAAAF,IAGA,OAFA/C,EAAAI,KAAA2C,GAEAnD,EAAAQ,KAAAN,EAAAiD,GAAA/B,KAAAZ,KAAA,KAGA,OARAL,EAAAgD,EASCX,GADDW,EAXA,GAcArB,EAAAwB,gBAEA,WACA,aAEA,SAAAA,IACAlD,EAAAI,KAAA8C,GAyBA,OAtBAjD,EAAAiD,EAAA,EACA7C,IAAA,eACAC,MAAA,SAAAC,GACA,GAAAsB,EAAAtB,GACA,SAGA,IAAA4C,EAAA,IAAA5C,EAAAuB,WACAsB,EAAA7C,EAAA2B,YAAA,EAMA,OAJAkB,EAAA,KACAA,EAAA,OAGAD,GAAA,IAAA5C,EAAA0B,KAAAmB,QAQAF,EA7BA,GAoCAxB,EAAA2B,uBAEA,WACA,aAEA,SAAAA,EAAAhB,GACArC,EAAAI,KAAAiD,GAEAjD,KAAAkD,YAAA,CACAC,EAAAlB,EACAmB,EAAAnB,EACAoB,EAAApB,GA0BA,OAtBApC,EAAAoD,EAAA,EACAhD,IAAA,eACAC,MAAA,SAAAC,GACA,QAAAsB,EAAAtB,IAIA+B,KAAAC,SAAAnC,KAAAkD,YAAA/C,EAAAuB,cAEG,CACHzB,IAAA,eACAC,MAAA,SAAAI,GACAA,EAAAgD,iBACAhD,EAAAiD,WACAvD,KAAAkD,YAAA5C,EAAAoB,aAAA,EAEA1B,KAAAkD,YAAA5C,EAAAoB,aAAA,OAMAuB,EAnCA,GAsCA3B,EAAAkC,uBAEA,SAAAC,GACA,aAIA,SAAAD,EAAAvB,GAGA,OAFArC,EAAAI,KAAAwD,GAEAhE,EAAAQ,KAAAN,EAAA8D,GAAA5C,KAAAZ,KAAA,KAsBA,OA3BAL,EAAA6D,EA4BCxB,GApBDnC,EAAA2D,EAAA,EACAvD,IAAA,eACAC,MAAA,SAAAC,GACA,GAAAsB,EAAAtB,GACA,SAGA,IAAAuD,EAAAvD,EAAAwB,iBACA+B,EAAAC,KAAAxD,EAAA0B,KAAA+B,SACA,IAAAC,EAAA3B,KAAA4B,IAAAC,MAAA7B,KAAAX,EAAAmC,IAEA,OAAAvD,EAAAwB,iBAAAxB,EAAAuB,WAAA,KAAAmC,GAGArC,EAAA9B,EAAA8D,EAAAQ,WAAA,eAAAhE,MAAAY,KAAAZ,KAAAG,OAKAqD,EA9BA,GAiCAlC,EAAA2C,UAEA,WACA,aAEA,SAAAA,IACArE,EAAAI,KAAAiE,GAkBA,OAfApE,EAAAoE,EAAA,EACAhE,IAAA,eACAC,MAAA,SAAAC,GACA,QAAAsB,EAAAtB,IAIAA,EAAA0B,KAAA1B,EAAA2B,aAAA3B,EAAAyB,sBAAA,MAQAqC,EAtBA,GAwDA3C,EAAA4C,aAEA,WACA,aAEA,SAAAA,IACAtE,EAAAI,KAAAkE,GAkBA,OAfArE,EAAAqE,EAAA,EACAjE,IAAA,eACAC,MAAA,SAAAC,GACA,GAAAsB,EAAAtB,GACA,SAGA,IAAA0B,EAAA1B,EAAA0B,KACAC,EAAA3B,EAAA2B,YACAF,EAAAzB,EAAAyB,oBAEA,OAnDA,SAAAuC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,GAAAH,EAAAE,EAAA,EACA,SAGA,IAAAE,EAAAlC,EAAAiC,EAAAH,GACAK,EAAAF,EAAAF,GAAAD,EAAA9B,EAAAiC,EAAAF,EAAAD,GAAA,EAIA,OAAAE,EACA,OAHA,EADAG,EAAAD,EAMA,IACAE,EADApC,EAAA+B,EAAA,GAAA/B,EAAAiC,EAAAF,EAAAD,EAAA,GACAI,EAEAG,EAAA,EAAAR,EAAAC,EAAAC,EAAA,EAAAE,GAEA,WAAAD,EACA,EAAAK,EAAAD,EACK,IAAAJ,EAGL,EAAAK,EAAAD,EAFApC,EAAA+B,EAAA,GAAA/B,EAAAiC,EAAAF,EAAAD,EAAA,GACAI,EAIA,EAyBAL,CADAhE,EAAAwB,iBAAAxB,EAAAuB,WAAA,GACA,EAAAG,EAAAC,GAAAF,EAAA,GAAAC,EAAA+B,SAAA,OAIAM,EAtBA,uBCrRA,IAAAtE,EAAsBH,EAAQ,GAE9BI,EAAmBJ,EAAQ,GAE3BK,EAAaL,EAAQ,IAMrBmF,GAJanF,EAAQ,GAAaM,OAEjBN,EAAQ,GAAac,WAItC,WACA,aAEA,SAAAqE,EAAAC,GACAjF,EAAAI,KAAA4E,GAEA,IAAAE,EAAA,IAAAC,EACAD,EAAAE,UACAhF,KAAA6E,UACA7E,KAAAiF,MAAAH,EAAAI,YACAlF,KAAAmF,QAAA,GACAnF,KAAAoF,KAAA,EACApF,KAAA8B,YAAA,EAuMA,OApMAjC,EAAA+E,EAAA,EACA3E,IAAA,qBACAC,MAAA,SAAAmF,GACA,IAAAC,EAAA,GAOA,OAJAA,EAAA3D,iBAAA,CAAA3B,KAAAiF,MAAAjF,KAAAuF,gCAAAF,EAAA,IAAAzB,QAAA5D,KAAAiF,MAAAjF,KAAAuF,gCAAAF,EAAA,IAAAzB,QAAA5D,KAAAiF,MAAAjF,KAAAuF,gCAAAF,EAAA,IAAAzB,SACA0B,EAAAzD,KAAA2D,OAAAC,OAAA,IAAAC,EAAA1F,KAAAiF,MAAAI,IACAC,EAAAK,YAAA3F,KAAAmF,QAAAS,OACAN,EAAAxD,YAAA9B,KAAA8B,YACAwD,IAEG,CACHrF,IAAA,yBACAC,MAAA,SAAAmF,EAAAzD,GACA,IAAAzB,EAAAH,KAAA6F,mBAAAR,GAGA,OAFAlF,EAAAuB,WAAA1B,KAAA8F,uCAAA9F,KAAAoF,KAAAC,GACAlF,EAAAyB,sBACAzB,IAEG,CACHF,IAAA,eACAC,MAAA,SAAAmF,EAAAU,EAAAzC,EAAA0C,EAAAzC,GACA,IAAApD,EAAAH,KAAAiG,uBAAAZ,EAAAU,EAAAH,QACAzF,EAAAmD,iBACAnD,EAAA6F,gBACA7F,EAAAoD,aACA,IAAA2C,EAAA5C,GAAA+B,IAAArF,KAAAoF,KAEA,OADAjF,EAAAgG,YAAAD,EAAAH,EAAA,GACA5F,IAEG,CACHF,IAAA,WACAC,MAAA,WACA,IAAAS,EAAAX,KAEA,OAAAA,KAAAoG,WAAAC,KAAA,SAAAC,GACA,IAAAC,EAAA5F,EAAA6F,UAEA,OAAAD,GAAA,EACAA,EACS5F,EAAA8F,aACT,EAEA9F,EAAA+F,eAIG,CACHzG,IAAA,UACAC,MAAA,WACA,QAAAyG,EAAA,EAAqBA,EAAA3G,KAAAiF,MAAAW,OAAuBe,IAC5C,MAAA3G,KAAAiF,MAAA0B,GAAA/C,QACA,OAAA+C,EAIA,WAEG,CACH1G,IAAA,YACAC,MAAA,WACA,OAAAF,KAAA4G,WAAA,KAIA5G,KAAAiF,MAAA,GAAA4B,aAAA7G,KAAAiF,MAAA,GAAA4B,aAAA7G,KAAAiF,MAAA,GAAA4B,aAAA7G,KAAAiF,MAAA,GAAA4B,cAEG,CACH5G,IAAA,WACAC,MAAA,WACA,IAAAiB,EAAAnB,KAEAA,KAAA4G,aACA5G,KAAA4G,WAAA,GAGA5G,KAAA4G,aACA,IAAAtB,EAAAtF,KAAA6F,mBAAA7F,KAAAoF,MAEA,OAAApF,KAAA6E,QAAA7E,KAAAoF,MAAAtE,SAAAwE,GAAAe,KAAA,SAAAS,GACAhH,EAAAiH,MAAAC,QAAAF,GAAA,iCAAAA,EAAA,aAAA3F,EAAAiE,MACAtF,EAAAgH,EAAAlB,OAAA,aAAAzE,EAAAiE,KAAA,kCAGA,IAFA,IAAAvD,EAAAV,EAAA8D,MAAA9D,EAAAiE,MAEAuB,EAAA,EAAuBA,EAAAG,EAAAlB,OAA2Be,IAAA,CAClD,IAAAM,EAAAH,EAAAH,GACA7G,EAAA+B,EAAAoF,GAAA,gCAAAA,EAAA,UAAApF,GACAA,EAAAoF,KAEA9F,EAAAgE,QAAAxB,KAAAsD,GAGA,OAAA9F,EAAA+F,yBAAAJ,GAAAT,KAAA,WAEAlF,EAAAiE,OACAjE,EAAAiE,KAAAjE,EAAAiE,KAAA,EACAjE,EAAAW,cAEAX,EAAAW,YAAA,KACAX,EAAAW,YAAA,SAKG,CACH7B,IAAA,2BACAC,MAAA,SAAA4G,GACA,IAAA1F,EAAApB,KAEAmH,EAAA,CAAAnH,KAAA6E,QAAA7E,KAAAuF,gCAAAvF,KAAAoF,KAAA,IAAApF,KAAA6E,QAAA7E,KAAAuF,gCAAAvF,KAAAoF,KAAA,IAAApF,KAAA6E,QAAA7E,KAAAuF,gCAAAvF,KAAAoF,KAAA,KACA,OAAApF,KAAAoH,eAAAN,EAAAlB,OAAA,EAAAuB,GAAAd,KAAA,SAAAC,GACA,IAAAhD,GAAA,IAAAgD,EACA/C,GAAA,EAEA,GAAAD,EACA,GAAAlC,EAAAiG,UAAAP,GAAA,CACA,IAAAQ,EAAAlG,EAAAmG,+BAAAnG,EAAAgE,KAAAkB,GAEAlF,EAAA6D,MAAAqC,GAAAE,SAAApG,EAAA+D,SAEA/D,EAAA+D,QAAA,QAEA5B,GAAA,EAEAnC,EAAA6D,MAAA7D,EAAAgE,MAAAoC,SAAApG,EAAA+D,SAEA/D,EAAA+D,QAAA,GAIA,IAAAsC,EAAAnE,EAAAlC,EAAAmG,+BAAAnG,EAAAgE,KAAAkB,GAAA,EACA,OAAAlF,EAAAsG,4BAAA,EAAAZ,EAAAxD,EAAAmE,EAAAlE,OAGG,CACHtD,IAAA,8BACAC,MAAA,SAAAyH,EAAA5B,EAAAzC,EAAA0C,EAAAzC,GACA,IAAAlC,EAAArB,KAEA4H,EAAAtE,EAAAtD,KAAA8F,uCAAAE,EAAA2B,GAAA,EACAxH,EAAAH,KAAA6H,aAAAF,EAAA5B,EAAAzC,EAAAsE,EAAArE,GACA,OAAAvD,KAAA6E,QAAA8C,GAAAzG,aAAAf,GAAAkG,KAAA,WACA,GAAAsB,EAAA,IACA,OAAAtG,EAAAqG,4BAAAC,EAAA,EAAA5B,EAAAzC,EAAA0C,EAAAzC,OAIG,CACHtD,IAAA,iBACAC,MAAA,SAAA0B,EAAAkG,EAAAjD,GACA,IAAAkD,EAAA/H,KAEAgI,EAAAhI,KAAAuH,+BAAAvH,KAAAoF,KAAA0C,GACA,OAAAjD,EAAAiD,GAAA9G,aAAAhB,KAAAiG,uBAAA+B,EAAApG,IAAAyE,KAAA,SAAAC,GACA,OAAAA,EACAwB,EAEAA,EAAA,EAAAjD,EAAAe,OACAmC,EAAAX,eAAAxF,EAAAkG,EAAA,EAAAjD,IAEA,MAKG,CACH5E,IAAA,YACAC,MAAA,SAAA4G,GACA,QAAAH,EAAA,EAAqBA,EAAAG,EAAAlB,OAA2Be,IAChD,GAAAG,EAAAH,IAAA3G,KAAA8B,YACA,SAIA,WAEG,CACH7B,IAAA,yCACAC,MAAA,SAAA+H,EAAAD,GAGA,OAAAC,EAAAD,EAAA,OAEG,CACH/H,IAAA,kCACAC,MAAA,SAAAkF,EAAA0C,GACA,OAAA1C,EAAA0C,GAAA,IAEG,CACH7H,IAAA,iCACAC,MAAA,SAAAkF,EAAA0C,GACA,OAAA1C,EAAA0C,EAAA,SAIAlD,EAnNA,IAsNAc,EAEA,WACA,aAEA,SAAAA,IACA9F,EAAAI,KAAA0F,GAsDA,OAnDA7F,EAAA6F,EAAA,EACAzF,IAAA,QACAC,MAAA,WAGA,IAFA,IAAAgI,EAAA,EAEAvB,EAAA,EAAqBA,GAAA,GAASA,IAC9BuB,GAAAlI,KAAA2G,GAGA,OAAAuB,IAEG,CACHjI,IAAA,YACAC,MAAA,WACA,QAAAyG,EAAA,EAAqBA,GAAA,GAASA,IAC9B,MAAA3G,KAAA2G,IAAA,IAAA3G,KAAA2G,GACA,SAIA,WAEG,CACH1G,IAAA,WACAC,MAAA,SAAAiI,GACA,IAAAC,EAAApI,KAEAmI,EAAAE,QAAA,SAAApB,GACAmB,EAAAnB,SAGG,CACHhH,IAAA,WACAC,MAAA,WACA,SAAAF,KAAAsI,YAEG,CACHrI,IAAA,UACAC,MAAA,WAGA,IAFA,IAAAiI,EAAA,GAEAxB,EAAA,EAAqBA,GAAA,GAASA,IAC9B,QAAA4B,EAAA,EAAuBA,EAAAvI,KAAA2G,GAAa4B,IACpCJ,EAAAxE,KAAAgD,GAIA,OAAAwB,MAIAzC,EA1DA,GA6DAX,EAEA,WACA,aAEA,SAAAA,IACAnF,EAAAI,KAAA+E,GAEA/E,KAAAmI,MAAA,GAEA,QAAAxB,EAAA,EAAmBA,GAAA,GAASA,IAC5B,QAAA4B,EAAA,EAAqBA,EAAA,EAAOA,IAC5BvI,KAAAmI,MAAAxE,KAAAgD,GA8CA,OAzCA9G,EAAAkF,EAAA,EACA9E,IAAA,YACAC,MAAA,WAGA,IAFA,IAAA+E,EAAA,GAEA1C,EAAA,EAAqBA,EAAA,EAAOA,IAAA,CAG5B,IAFA,IAAAV,EAAA,IAAA6D,EAEAiB,EAAA,EAAuBA,GAAA,GAASA,IAChC9E,EAAA8E,GAAA,EAGA,QAAA6B,EAAA,GAAAjG,EAAoCiG,EAAA,IAAAjG,EAAA,GAA0BiG,IAC9D3G,EAAA7B,KAAAmI,MAAAK,MAGAvD,EAAAtB,KAAA9B,GAGA,OAAAoD,IAEG,CACHhF,IAAA,UACAC,MAAA,WAGA,IAFA,IAAAuI,EAAA,GAEAzI,KAAAmI,MAAAvC,OAAA,IACA,IAAAkC,EAAA9H,KAAA0I,cACAD,EAAA9E,KAAA3D,KAAAmI,MAAAL,IACA9H,KAAAmI,MAAAQ,OAAAb,EAAA,GAGA9H,KAAAmI,MAAAM,IAEG,CACHxI,IAAA,cACAC,MAAA,WACA,OAAAgC,KAAA0G,MAAA1G,KAAAC,SAAAnC,KAAAmI,MAAAvC,YAIAb,EAxDA,GA2DA8D,EAAAvH,QAAAsD,wGC9VA,IAAApD,EAAW/B,EAAQ,IAEnBD,EAAiCC,EAAQ,IAEzCC,EAAsBD,EAAQ,GAE9BE,EAAgBF,EAAQ,IAExBG,EAAsBH,EAAQ,GAE9BI,EAAmBJ,EAAQ,GAE3BK,EAAaL,EAAQ,IAErB6B,EAAAwH,WAEA,WACA,aAEA,SAAAA,IACAlJ,EAAAI,KAAA8I,GAoBA,OAjBAjJ,EAAAiJ,EAAA,EACA7I,IAAA,WACAC,MAAA,SAAAC,GAGA,IAFA,IAAAgI,EAAA,GAEAxB,EAAA,EAAqBA,EAAAxG,EAAA0B,KAAA1B,EAAA2B,aAAmC6E,IACxDwB,EAAAxE,KAAAxD,EAAA2B,aAGA,OAAAqG,EAAAvC,OAAA,EACAuC,EAEA,CAAAY,EAAA5I,EAAA0B,KAAA1B,EAAA2B,kBAKAgH,EAxBA,GA2BA,IAAAE,EAEA,WACA,aAEA,SAAAA,EAAA/G,GACArC,EAAAI,KAAAgJ,GAEAhJ,KAAAiC,aA0BA,OAvBApC,EAAAmJ,EAAA,EACA/I,IAAA,WACAC,MAAA,SAAAC,GAGA,IAFA,IAAAgI,EAAA,GAEAxB,EAAA,EAAqBA,EAAAxG,EAAA0B,KAAA1B,EAAA2B,aAAmC6E,IACxDwB,EAAAxE,KAAAxD,EAAA2B,aAKA,OAFA3B,EAAA0B,KAAA1B,EAAA2B,aAAA,EAEAqG,EAAAvC,OAAA,GACA1D,KAAAC,SAAAnC,KAAAiC,YAAA9B,EAAA0B,KAAA+B,QAAA,GAAAuE,EAAAvC,OAAA,GACAuC,EAAAxE,KAAAoF,EAAA5I,EAAA0B,KAAA1B,EAAA2B,cAGAqG,GAEA,CAAAY,EAAA5I,EAAA0B,KAAA1B,EAAA2B,kBAKAkH,EAhCA,GAmCA1H,EAAA2H,mBAEA,WACA,aAEA,SAAAA,IACArJ,EAAAI,KAAAiJ,GAsBA,OAnBApJ,EAAAoJ,EAAA,EACAhJ,IAAA,WACAC,MAAA,SAAAC,GAGA,IAFA,IAAAgI,EAAA,GAEAxB,EAAA,EAAqBA,EAAAxG,EAAA0B,KAAA1B,EAAA2B,aAAmC6E,IACxDwB,EAAAxE,KAAAxD,EAAA2B,aASA,OANA3B,EAAA0B,KAAA1B,EAAA2B,aAAA,EAEA3B,EAAA0B,KAAA+B,QAAA,GAAAuE,EAAAvC,QAAA,GACAuC,EAAAxE,KAAAoF,EAAA5I,EAAA0B,KAAA1B,EAAA2B,cAGAqG,MAIAc,EA1BA,GA6BA3H,EAAAqB,aAEA,SAAAuG,GACA,aAIA,SAAAvG,IAGA,OAFA/C,EAAAI,KAAA2C,GAEAnD,EAAAQ,KAAAN,EAAAiD,GAAA/B,KAAAZ,KAAA,KAGA,OARAL,EAAAgD,EASCqG,GADDrG,EAXA,GAcArB,EAAA6H,aAEA,SAAAC,GACA,aAIA,SAAAzG,IAGA,OAFA/C,EAAAI,KAAA2C,GAEAnD,EAAAQ,KAAAN,EAAAiD,GAAA/B,KAAAZ,KAAA,KAGA,OARAL,EAAAgD,EASCqG,GADDrG,EAXA,GAcArB,EAAA+H,UAEA,SAAAC,GACA,aAIA,SAAAD,IAGA,OAFAzJ,EAAAI,KAAAqJ,GAEA7J,EAAAQ,KAAAN,EAAA2J,GAAAzI,KAAAZ,KAAA,IAGA,OARAL,EAAA0J,EASCL,GADDK,EAXA,GAcA,IAAAE,EAEA,WACA,aAEA,SAAAA,IACA3J,EAAAI,KAAAuJ,GAGAvJ,KAAAwJ,QAAA,CACAC,SAAA,EACAC,YAAA,GAEA1J,KAAA2J,SAAA,CACAF,SAAA,EACAC,YAAA,GAEA1J,KAAA4J,WAAA,CACAH,SAAA,EACAC,YAAA,GAsGA,OAlGA7J,EAAA0J,EAAA,EACAtJ,IAAA,kBACAC,MAAA,SAAA2J,GACA,WAAAA,EACA7J,KAAAwJ,QAAAC,UAAAzJ,KAAAwJ,QAAAE,YAAA1J,KAAAwJ,QAAAC,UACO,IAAAI,EACP7J,KAAA2J,SAAAF,UAAAzJ,KAAA2J,SAAAD,YAAA1J,KAAA2J,SAAAF,UACO,IAAAI,EACP7J,KAAA4J,WAAAH,UAAAzJ,KAAA4J,WAAAF,YAAA1J,KAAA4J,WAAAH,WAEA3J,EAAA,oCACA,KAGG,CACHG,IAAA,gBACAC,MAAA,SAAA2J,EAAAlE,EAAAmE,GACA,GAAAA,EAGO,CACP,IAAAC,EAAA/J,KAAAgK,gBAAAH,GACA,SAAAE,GAAAF,EAAAE,EAAApE,EAHA,OAAAkE,IAMG,CACH5J,IAAA,WACAC,MAAA,SAAAC,GAGA,IAFA,IAAAgI,EAAA,GAEAxB,EAAA,EAAqBA,EAAAxG,EAAA0B,KAAA1B,EAAA2B,aAAmC6E,IACxDwB,EAAAxE,KAAAxD,EAAA2B,aAKA,GAFA3B,EAAA0B,KAAA1B,EAAA2B,aAAA,EAEA,IAAAqG,EAAAvC,OACA,OAAAuC,EAGA,IAAA8B,EAAAjK,KAAAkK,cAAA,EAAA/J,EAAAwF,YAAAwC,EAAAvC,OAAA,GACAuE,EAAAnK,KAAAkK,cAAA,EAAA/J,EAAAwF,YAAAwC,EAAAvC,OAAA,GACAwE,EAAApK,KAAAkK,cAAA,EAAA/J,EAAAwF,YAAAwC,EAAAvC,OAAA,GACAyE,EAAA,EAGAA,EADAJ,EAAAE,GAAAF,EAAAG,EACA,EAAAjC,EAAAvC,OACOuE,EAAAF,GAAAE,EAAAC,EACP,EAAAjC,EAAAvC,OAGA,EAAAuC,EAAAvC,OAMA,IAFAzF,EAAA0B,KAAA+B,QAAAuE,EAAAvC,OAEAe,EAAA,EAAqBA,EAAA0D,EAAgB1D,IACrC,GAAAxG,EAAA0B,KAAA+B,QAAA,GAAAuE,EAAAvC,OAAA,GACA,IAAAqB,EAAA8B,EAAA5I,EAAA0B,KAAA1B,EAAA2B,aACAqG,EAAAxE,KAAAoF,EAAA5I,EAAA0B,KAAA1B,EAAA2B,cACA3B,EAAA0B,KAAAoF,KAKA,OAAAkB,IAEG,CACHlI,IAAA,eACAC,MAAA,SAAAI,GACAA,EAAAgD,gBAAA,IAAAhD,EAAA0F,gBAKA,IAAA1F,EAAAsB,oBACAtB,EAAAgD,eACAtD,KAAAwJ,QAAAC,WAEAzJ,KAAAwJ,QAAAE,cAEO,IAAApJ,EAAAsB,oBACPtB,EAAAgD,eACAtD,KAAA2J,SAAAF,WAEAzJ,KAAA2J,SAAAD,cAEO,IAAApJ,EAAAsB,sBACPtB,EAAAgD,eACAtD,KAAA4J,WAAAH,WAEAzJ,KAAA4J,WAAAF,oBAMAH,EAvHA,GA0HAjI,EAAAiI,oBAEAjI,EAAAgJ,YAEA,SAAAC,GACA,aAIA,SAAAD,IAGA,OAFA1K,EAAAI,KAAAsK,GAEA9K,EAAAQ,KAAAN,EAAA4K,GAAA1J,KAAAZ,KAAA,IAqBA,OA1BAL,EAAA2K,EA2BCtB,GAnBDnJ,EAAAyK,EAAA,EACArK,IAAA,WACAC,MAAA,SAAAC,GAIA,IAHA,IAAAqK,EAAAC,EAAAtK,EAAA2B,YAAA3B,EAAA0B,KAAA,GACAsG,EAAA,GAEAxB,EAAA,EAAqBA,EAAAxG,EAAA0B,KAAA1B,EAAA2B,aAAmC6E,IACxDwB,EAAAxE,KAAAxD,EAAA2B,aAGA,OAAA0I,EACArC,EAEA3G,EAAA9B,EAAA4K,EAAAtG,WAAA,WAAAhE,MAAAY,KAAAZ,KAAAG,OAKAmK,EA7BA,GAgCAhJ,EAAAoJ,OAEA,SAAAC,GACA,aAIA,SAAAD,IAGA,OAFA9K,EAAAI,KAAA0K,GAEAlL,EAAAQ,KAAAN,EAAAgL,GAAA3G,MAAA/D,KAAA4K,YA2BA,OAhCAjL,EAAA+K,EAiCCnB,GAzBD1J,EAAA6K,EAAA,EACAzK,IAAA,WACAC,MAAA,SAAAC,GAIA,IAHA,IAAAqK,EAAAC,EAAAtK,EAAA2B,YAAA3B,EAAA0B,KAAA,GACAsG,EAAA,GAEAxB,EAAA,EAAqBA,EAAAxG,EAAA0B,KAAA1B,EAAA2B,aAAmC6E,IACxDwB,EAAAxE,KAAAxD,EAAA2B,aAKA,OAFA3B,EAAA0B,KAAA1B,EAAA2B,aAAA,EAEA,IAAAqG,EAAAvC,OACAuC,EAEAqC,EACArC,EAEA3G,EAAA9B,EAAAgL,EAAA1G,WAAA,WAAAhE,MAAAY,KAAAZ,KAAAG,OAMAuK,EAnCA,GAsCA,IAAAG,EAEA,SAAAC,GACA,aAIA,SAAAD,IAGA,OAFAjL,EAAAI,KAAA6K,GAEArL,EAAAQ,KAAAN,EAAAmL,GAAAjK,KAAAZ,KAAA,IAgCA,OArCAL,EAAAkL,EAsCC7B,GA9BDnJ,EAAAgL,EAAA,EACA5K,IAAA,WACAC,MAAA,SAAAC,GACA,IAAA4K,EAAA,EAsBA,OApBA5K,EAAA0B,KAAA+B,SAAAzD,EAAAwB,iBAAA,IACAoJ,IAGA5K,EAAA0B,KAAA+B,SAAAzD,EAAAwB,iBAAA,IACAoJ,IAGA5K,EAAA0B,KAAA+B,SAAAzD,EAAAwB,iBAAA,IACAoJ,IAIA/K,KAAAiC,WADA,IAAA8I,EACA,IACO,IAAAA,EACP,IAEA,EAGAvJ,EAAA9B,EAAAmL,EAAA7G,WAAA,WAAAhE,MAAAY,KAAAZ,KAAAG,OAIA0K,EAxCA,GAkFA,SAAA9B,EAAAlH,EAAAmJ,GAKA,IAJA,IAAAnJ,EAAA+B,SACA9D,GAAA,2CAUA,IANAkL,GAAA,GAEA,IACAA,GAAA,IAGAnJ,EAAAmJ,GAAA,EACA,OAAAA,EAKA,SAAAP,EAAA3I,EAAAD,EAAAoJ,GACA,GAAAA,GAAApJ,EAAA+B,QACA,SAGA,OAAA/B,EAAAC,GACA,SAGA,IAAAkB,EAAAlB,EAAA,EAMA,OAJAkB,EAAA,KACAA,GAAA,IAGAyH,EAAAzH,EAAAnB,EAAAoJ,EAAApJ,EAAAC,IAxEAR,EAAAuJ,YAEAvJ,EAAA4J,YAEA,SAAAC,GACA,aAIA,SAAAD,IAGA,OAFAtL,EAAAI,KAAAkL,GAEA1L,EAAAQ,KAAAN,EAAAwL,GAAAnH,MAAA/D,KAAA4K,YAwBA,OA7BAjL,EAAAuL,EA8BCL,GAtBDhL,EAAAqL,EAAA,EACAjL,IAAA,WACAC,MAAA,SAAAC,GAGA,GAFAsK,EAAAtK,EAAA2B,YAAA3B,EAAA0B,KAAA,GAEA,CAGA,IAFA,IAAAsG,EAAA,GAEAxB,EAAA,EAAuBA,EAAAxG,EAAA0B,KAAA1B,EAAA2B,aAAmC6E,IAC1DwB,EAAAxE,KAAAxD,EAAA2B,aAKA,OAFA3B,EAAA0B,KAAA1B,EAAA2B,aAAA,EACAhC,EAAAqI,EAAAvC,OAAA,uEAAAzF,EAAA2B,YAAA,MAAA3B,EAAA0B,MACAsG,EAEA,OAAA3G,EAAA9B,EAAAwL,EAAAlH,WAAA,WAAAhE,MAAAY,KAAAZ,KAAAG,OAKA+K,EAhCA,0KCjZME,EAAoB,CACxBtC,WAAcA,aACd4B,OAAUA,SACVJ,YAAeA,cACfY,YAAeA,eAGXG,EAAoB,CACxBtJ,UAAaA,YACbkB,uBAA0BA,yBAC1BO,uBAA0BA,0BAGtB8H,cACJ,SAAAA,EAAYC,GAAe,IAAA5K,EAAA,OAAA6E,OAAAgG,EAAA,EAAAhG,CAAAxF,KAAAsL,IACzB3K,EAAA6E,OAAAiG,EAAA,EAAAjG,CAAAxF,KAAAwF,OAAAkG,EAAA,EAAAlG,CAAA8F,GAAA1K,KAAAZ,QAEKuL,cAAgBA,EAHI5K,wEAMlBR,GAAO,IAAAgB,EAAAnB,KACd,OAAO,IAAII,QAAQ,SAACC,GAClBF,EAAMwL,SAAU,EAChBxL,EAAMG,SAAU,EAChBH,EAAMyL,YAAc,GACpBzK,EAAKoK,cAAcpL,GACnBgB,EAAK0K,gBAAkBxL,yCAIdF,GAAO,IAAAiB,EAAApB,KAClB,OAAO,IAAII,QAAQ,SAACC,GAClBF,EAAMwL,SAAU,EAChBxL,EAAMG,SAAU,EAChBc,EAAKmK,cAAcpL,GACnBiB,EAAK0K,oBAAsBzL,yCAIlBC,GAAS,IAAAe,EAAArB,KACpB,OAAO,IAAII,QAAQ,SAACC,GAClBC,EAAQqL,SAAU,EAClBrL,EAAQA,SAAU,EAClBe,EAAKkK,cAAcjL,GACnBe,EAAK0K,eAAiB1L,WA/BFN,UAoCpBiM,cACJ,SAAAA,EAAYC,GAAO,IAAAlE,EAAA,OAAAvC,OAAAgG,EAAA,EAAAhG,CAAAxF,KAAAgM,IACjBjE,EAAAvC,OAAAiG,EAAA,EAAAjG,CAAAxF,KAAAwF,OAAAkG,EAAA,EAAAlG,CAAAwG,GAAApL,KAAAZ,KAAMiM,KAEDC,aAAenE,EAAKmE,aAAaC,KAAlB3G,OAAA4G,EAAA,EAAA5G,QAAA4G,EAAA,EAAA5G,CAAAuC,KAEpBA,EAAK5H,MAAQ,GALI4H,4EAQN5H,GACXA,EAAM0B,KAAO1B,EAAM0B,KAAKyG,UACxBtI,KAAKqM,SAASlM,+CAIdH,KAAKsM,sDAGQ,IAAAlE,EAAApI,KACPuM,EAAwB,CAC5B,aACA,SACA,cACA,eAGIC,EAAwB,CAC5B,YACA,yBACA,0BAGF,SAASC,EAAmBC,GAC1B,OAAOA,EAAMxK,KAAK0G,MAAM1G,KAAKC,SAAWuK,EAAM9G,SAGhD,IAAM+G,EAAwB,CAC5B,CACEC,KAAMH,EAAmBF,GACzB3L,KAAM6L,EAAmBD,IAE3B,CACEI,KAAMH,EAAmBF,GACzB3L,KAAM6L,EAAmBD,IAE3B,CACEI,KAAMH,EAAmBF,GACzB3L,KAAM6L,EAAmBD,KAIvBnH,EAAS,IAAIiG,EAAYtL,KAAKkM,cAC9BW,EAAU,IAAItM,aAAW,IAAI6K,EAAkBuB,EAAsB,GAAGC,MAAS,IAAIvB,EAAkBsB,EAAsB,GAAG/L,OAChIkM,EAAU,IAAIvM,aAAW,IAAI6K,EAAkBuB,EAAsB,GAAGC,MAAS,IAAIvB,EAAkBsB,EAAsB,GAAG/L,OAChImM,EAAU,IAAIxM,aAAW,IAAI6K,EAAkBuB,EAAsB,GAAGC,MAAS,IAAIvB,EAAkBsB,EAAsB,GAAG/L,OAEhIoM,EAAO,IAAIpI,OAAK,CAACS,EAAQwH,EAASC,EAASC,IACjDC,EAAKtG,WAAWL,KAAK,SAAC4G,GACpB7E,EAAKiE,SAAS,CACZY,cAAeA,EACfC,UAAU,MAIdlN,KAAKqM,SAAS,CACZhH,OAAQA,EACR2H,KAAMA,EACNC,mBAAeE,EACfD,UAAU,EACVP,sBAAuBA,uCAIhBxE,GAAO,IAAAiF,EAAApN,KACVqN,EAAYlF,EAAMmF,IAAI,SAACrG,EAAMa,GACjC,OACEyF,EAAAC,EAAAC,cAAA,UAAQC,QAAS,WACf,IAAI7L,EAAOuL,EAAKjN,MAAM0B,KACtBA,EAAK8G,OAAOb,EAAO,GACnB,IAAI8D,EAAcwB,EAAKjN,MAAMyL,aAAe,GAC5CA,EAAYjI,KAAKsD,GACjBmG,EAAKf,SAAS,CACZxK,KAAMA,EACN+J,YAAaA,KAGf3L,IAAK6H,GAAQb,KAInB,OACEsG,EAAAC,EAAAC,cAAA,WACGJ,yCAKOlF,GAAO,IAAAwF,EAAA3N,KACbqN,EAAYlF,EAAMmF,IAAI,SAACrG,EAAMa,GACjC,OACEyF,EAAAC,EAAAC,cAAA,UAAQC,QAAS,WACf,IAAI7L,EAAO8L,EAAKxN,MAAM0B,KACtBA,EAAK8B,KAAKsD,GACV,IAAI2E,EAAc+B,EAAKxN,MAAMyL,aAAe,GAC5CA,EAAYjD,OAAOb,EAAO,GAC1B6F,EAAKtB,SAAS,CACZxK,KAAMA,EACN+J,YAAaA,KAGf3L,IAAK6H,GAAQb,KAInB,OACEsG,EAAAC,EAAAC,cAAA,WACGJ,gDAKc,IACfO,EADeC,EAAA7N,KAGjB4N,EADE5N,KAAKG,MAAMyL,YAAYhG,OAAS,EAEhC2H,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQC,QAAS,WAAQG,EAAK1N,MAAMkF,OAAOwG,gBAAgBgC,EAAK1N,MAAMyL,eAAtE,gBAIS2B,EAAAC,EAAAC,cAAA,YAGf,IAAI5L,EAAO7B,KAAK8N,WAAW9N,KAAKG,MAAM0B,MAAQ,IAE9C,OACE0L,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,yBACc5L,GAEd0L,EAAAC,EAAAC,cAAA,4BACiBzN,KAAKG,MAAMwF,aAE5B4H,EAAAC,EAAAC,cAAA,2BACgBzN,KAAKG,MAAMwB,iBAAiB,GAD5C,wBACqE3B,KAAKG,MAAMwB,iBAAiB,GADjG,wBAC0H3B,KAAKG,MAAMwB,iBAAiB,GADtJ,WAGA4L,EAAAC,EAAAC,cAAA,4BACiBzN,KAAKG,MAAM2B,aAE5ByL,EAAAC,EAAAC,cAAA,kDAGAF,EAAAC,EAAAC,cAAA,qCAC0BzN,KAAK+N,cAAc/N,KAAKG,MAAMyL,aAAe,KAEtEgC,8CAKY,IACbI,EADaC,EAAAjO,KAEbkO,EAAgBlO,KAAKG,MAAMuB,WAAa,EAC5C,GAAI1B,KAAKG,MAAMmD,eAAgB,CAC7B,IAAI0C,EAAgBhG,KAAKG,MAAM6F,cAAgB,EAC/CgI,EAAO,mDAAqDhI,EAAgB,KACxEhG,KAAKG,MAAMoD,WACbyK,GAAQ,6CAA+ChO,KAAKG,MAAMgG,YAElE6H,GAAQ,sCAAwChO,KAAKG,MAAMgG,YAAc,aAAeH,EAAgB,yCAG1GgI,EAAO,4BAA8BE,EAAgB,WAAalO,KAAKG,MAAMyB,oBAAsB,qCAErG,OACE2L,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,4BACiBzN,KAAKG,MAAM2B,aAE5ByL,EAAAC,EAAAC,cAAA,WACGO,GAEHT,EAAAC,EAAAC,cAAA,4BACiBzN,KAAKG,MAAMwF,aAE5B4H,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQC,QAAS,WAAQO,EAAK9N,MAAMkF,OAAO0G,mBAA3C,oDAMY,IAAAoC,EAAAnO,KAClB,OACEuN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,qDAC0CzN,KAAKG,MAAMuB,WAAa,EADlE,KAGA6L,EAAAC,EAAAC,cAAA,yBACc,GAAKzN,KAAKG,MAAM0B,MAE9B0L,EAAAC,EAAAC,cAAA,4BACiBzN,KAAKG,MAAM2B,aAE5ByL,EAAAC,EAAAC,cAAA,sCAC2BzN,KAAKG,MAAMyB,qBAEtC2L,EAAAC,EAAAC,cAAA,2BACgBzN,KAAKG,MAAMwB,iBAAiB,GAD5C,wBACqE3B,KAAKG,MAAMwB,iBAAiB,GADjG,wBAC0H3B,KAAKG,MAAMwB,iBAAiB,GADtJ,WAGA4L,EAAAC,EAAAC,cAAA,4BACiBzN,KAAKG,MAAMwF,aAE5B4H,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQC,QAAS,WAAQS,EAAKhO,MAAMkF,OAAOyG,qBAAoB,KAA/D,QACAyB,EAAAC,EAAAC,cAAA,UAAQC,QAAS,WAAQS,EAAKhO,MAAMkF,OAAOyG,qBAAoB,KAA/D,uDAMYhE,GAClB,IAaMsG,EAAWpO,KAAKG,MAAMwM,sBAAsB7E,GAIlD,MAjB2B,CACzBgB,WAAc,iCACd4B,OAAU,gHACVJ,YAAe,4EACfY,YAAe,gGAWekD,EAASxB,MAAQ,SARrB,CAC1B7K,UAAa,2DACbkB,uBAA0B,2EAC1BO,uBAA0B,qDAKoD4K,EAASxN,+CAMzF,OACE2M,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,wCAGAF,EAAAC,EAAAC,cAAA,wBACazN,KAAKqO,oBAAoB,IAEtCd,EAAAC,EAAAC,cAAA,wBACazN,KAAKqO,oBAAoB,IAEtCd,EAAAC,EAAAC,cAAA,wBACazN,KAAKqO,oBAAoB,sCAMnC,IA2BHC,EA3BGC,EAAAvO,KACP,GAAIA,KAAKG,MAAM+M,SAAU,CACvB,IAAIsB,EACJ,GAAiC,IAA7BxO,KAAKG,MAAM8M,cACbuB,EAAU,6BAGVA,EAAU,WADGxO,KAAKG,MAAM8M,cAAgB,GACT,kCAGjC,OACEM,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACGe,GAEFxO,KAAKyO,iBACNlB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQC,QAAS,WAAQa,EAAKjC,iBAA9B,gBAID,OAAKtM,KAAKG,MAAM0B,MASrByM,EADEtO,KAAKG,MAAMwL,QACG3L,KAAK0O,qBACZ1O,KAAKG,MAAMG,QACJN,KAAK2O,mBAEL3O,KAAK4O,oBAIrBrB,EAAAC,EAAAC,cAAA,WACGa,IAhBDf,EAAAC,EAAAC,cAAA,gCA5RqBoB,aAwVdC,cArCb,SAAAA,EAAY7C,GAAO,IAAA8C,EAAA,OAAAvJ,OAAAgG,EAAA,EAAAhG,CAAAxF,KAAA8O,IACjBC,EAAAvJ,OAAAiG,EAAA,EAAAjG,CAAAxF,KAAAwF,OAAAkG,EAAA,EAAAlG,CAAAsJ,GAAAlO,KAAAZ,KAAMiM,KACD9L,MAAQ,GAFI4O,2EAMjB/O,KAAKqM,SAAS,CAAE2C,aAAa,qCAGtB,IACHC,EADGC,EAAAlP,KAiBP,OAbEiP,EADEjP,KAAKG,MAAM6O,YAEXzB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC0B,EAAD,OAKF5B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQC,QAAS,WAAQwB,EAAKE,cAA9B,eAMJ7B,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,OACb9B,EAAAC,EAAAC,cAAA,UAAQ4B,UAAU,cAChB9B,EAAAC,EAAAC,cAAA,iBAEDwB,UAhCSJ,aC9VES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7J,KAAK,SAAA8J,GACjCA,EAAaC","file":"static/js/main.55c8c1a2.chunk.js","sourcesContent":["var _possibleConstructorReturn = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _classCallCheck = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/createClass\");\n\nvar assert = require('assert');\n\nvar Player =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function Player() {\n    _classCallCheck(this, Player);\n  }\n\n  _createClass(Player, [{\n    key: \"playHand\",\n    value: function playHand(state) {\n      assert(false, 'You must overwrite this function');\n    }\n  }, {\n    key: \"callBullshit\",\n    value: function callBullshit(state) {\n      assert(false, 'You must overwrite this function');\n      return new Promise(function (resolve) {\n        resolve(false);\n      });\n    }\n  }, {\n    key: \"roundSummary\",\n    value: function roundSummary(summary) {\n      return new Promise(function (resolve) {\n        resolve();\n      });\n    }\n  }]);\n\n  return Player;\n}();\n\nvar SyncPlayer =\n/*#__PURE__*/\nfunction (_Player) {\n  \"use strict\";\n\n  _inherits(SyncPlayer, _Player);\n\n  function SyncPlayer(playHandPlayer, callBullshitPlayer) {\n    var _this;\n\n    _classCallCheck(this, SyncPlayer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SyncPlayer).call(this));\n\n    _this.syncPlayHand = function (state) {\n      return playHandPlayer.playHand(state);\n    };\n\n    _this.syncCallBullshit = function (state) {\n      return callBullshitPlayer.callBullshit(state);\n    };\n\n    _this.syncRoundSummary = function (summary) {\n      if (playHandPlayer.roundSummary) {\n        playHandPlayer.roundSummary(summary);\n      }\n\n      if (callBullshitPlayer.roundSummary) {\n        callBullshitPlayer.roundSummary(summary);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(SyncPlayer, [{\n    key: \"playHand\",\n    value: function playHand(state) {\n      var _this2 = this;\n\n      return new Promise(function (resolve) {\n        resolve(_this2.syncPlayHand(state));\n      });\n    }\n  }, {\n    key: \"callBullshit\",\n    value: function callBullshit(state) {\n      var _this3 = this;\n\n      return new Promise(function (resolve) {\n        resolve(_this3.syncCallBullshit(state));\n      });\n    }\n  }, {\n    key: \"roundSummary\",\n    value: function roundSummary(summary) {\n      var _this4 = this;\n\n      return new Promise(function (resolve) {\n        _this4.syncRoundSummary(summary);\n\n        resolve();\n      });\n    }\n  }]);\n\n  return SyncPlayer;\n}(Player);\n\nexports.Player = Player;\nexports.SyncPlayer = SyncPlayer;","var _toConsumableArray = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _get = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/get\");\n\nvar _possibleConstructorReturn = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _classCallCheck = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/createClass\");\n\nfunction alwaysCall(state) {\n  if (state.playerTurn == 3 && state.otherPlayerCards[2] === 0) {\n    return true;\n  } else if (state.numberOfCardsPlayed + state.hand[state.currentCard] > 4) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexports.NeverCall =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function NeverCall() {\n    _classCallCheck(this, NeverCall);\n  }\n\n  _createClass(NeverCall, [{\n    key: \"callBullshit\",\n    value: function callBullshit(state) {\n      if (alwaysCall(state)) {\n        return true;\n      }\n\n      return false;\n    }\n  }]);\n\n  return NeverCall;\n}();\n\nvar CallPercentage =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function CallPercentage(percentage) {\n    _classCallCheck(this, CallPercentage);\n\n    this.percentage = percentage;\n  }\n\n  _createClass(CallPercentage, [{\n    key: \"callBullshit\",\n    value: function callBullshit(state) {\n      if (alwaysCall(state)) {\n        return true;\n      }\n\n      return Math.random() < this.percentage;\n    }\n  }]);\n\n  return CallPercentage;\n}();\n\nexports.Call10Percent =\n/*#__PURE__*/\nfunction (_CallPercentage) {\n  \"use strict\";\n\n  _inherits(Lie10Percent, _CallPercentage);\n\n  function Lie10Percent() {\n    _classCallCheck(this, Lie10Percent);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Lie10Percent).call(this, 0.1));\n  }\n\n  return Lie10Percent;\n}(CallPercentage);\n\nexports.Call50Percent =\n/*#__PURE__*/\nfunction (_CallPercentage2) {\n  \"use strict\";\n\n  _inherits(Lie10Percent, _CallPercentage2);\n\n  function Lie10Percent() {\n    _classCallCheck(this, Lie10Percent);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Lie10Percent).call(this, 0.5));\n  }\n\n  return Lie10Percent;\n}(CallPercentage);\n\nexports.CallIfLieNeeded =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function CallIfLieNeeded() {\n    _classCallCheck(this, CallIfLieNeeded);\n  }\n\n  _createClass(CallIfLieNeeded, [{\n    key: \"callBullshit\",\n    value: function callBullshit(state) {\n      if (alwaysCall(state)) {\n        return true;\n      }\n\n      var imNext = state.playerTurn === 3;\n      var nextCard = state.currentCard + 1;\n\n      if (nextCard > 13) {\n        nextCard = 13;\n      }\n\n      if (imNext && state.hand[nextCard] === 0) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }]);\n\n  return CallIfLieNeeded;\n}();\n/**\n * Starts with a chance of calling out each player. Then, doubles this every time the player lies and halves it when they don't lie.\n */\n\n\nexports.CallUpdatingPercentage =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function CallUpdatingPercentage(percentage) {\n    _classCallCheck(this, CallUpdatingPercentage);\n\n    this.percentages = {\n      1: percentage,\n      2: percentage,\n      3: percentage\n    };\n  }\n\n  _createClass(CallUpdatingPercentage, [{\n    key: \"callBullshit\",\n    value: function callBullshit(state) {\n      if (alwaysCall(state)) {\n        return true;\n      }\n\n      return Math.random() < this.percentages[state.playerTurn];\n    }\n  }, {\n    key: \"roundSummary\",\n    value: function roundSummary(summary) {\n      if (summary.bullshitCalled) {\n        if (summary.playerLied) {\n          this.percentages[summary.playerTurn] *= 2;\n        } else {\n          this.percentages[summary.playerTurn] /= 2;\n        }\n      }\n    }\n  }]);\n\n  return CallUpdatingPercentage;\n}();\n\nexports.CallPercentageOnWinner =\n/*#__PURE__*/\nfunction (_CallPercentage3) {\n  \"use strict\";\n\n  _inherits(CallPercentageOnWinner, _CallPercentage3);\n\n  function CallPercentageOnWinner(percentage) {\n    _classCallCheck(this, CallPercentageOnWinner);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CallPercentageOnWinner).call(this, 0.1));\n  }\n\n  _createClass(CallPercentageOnWinner, [{\n    key: \"callBullshit\",\n    value: function callBullshit(state) {\n      if (alwaysCall(state)) {\n        return true;\n      }\n\n      var allHands = state.otherPlayerCards;\n      allHands.push(state.hand.count());\n      var winningNumberOfCards = Math.min.apply(Math, _toConsumableArray(allHands));\n\n      if (state.otherPlayerCards[state.playerTurn - 1] !== winningNumberOfCards) {\n        return false;\n      } else {\n        return _get(_getPrototypeOf(CallPercentageOnWinner.prototype), \"callBullshit\", this).call(this, state);\n      }\n    }\n  }]);\n\n  return CallPercentageOnWinner;\n}(CallPercentage);\n\nexports.Collector =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function Collector() {\n    _classCallCheck(this, Collector);\n  }\n\n  _createClass(Collector, [{\n    key: \"callBullshit\",\n    value: function callBullshit(state) {\n      if (alwaysCall(state)) {\n        return true;\n      }\n\n      if (state.hand[state.currentCard] + state.numberOfCardsPlayed === 4) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }]);\n\n  return Collector;\n}();\n\nfunction chanceOfHavingASpecificCard(handSize, cardsLeft, numberOfSpecificCards, deckSize) {\n  if (handSize - numberOfSpecificCards < 0) {\n    return 0;\n  }\n\n  var totalPossibleHands = choose(deckSize, handSize);\n  var numberOfHandsWithNoCards = deckSize - cardsLeft >= handSize ? choose(deckSize - cardsLeft, handSize) : 0;\n  var probabilityOfNoCards = numberOfHandsWithNoCards / totalPossibleHands;\n  var probabilityOfMoreThanOneCard = 1 - probabilityOfNoCards;\n\n  if (numberOfSpecificCards === 1) {\n    return probabilityOfMoreThanOneCard;\n  } else {\n    var totalHandsWithExactlyOneCard = choose(cardsLeft, 1) * choose(deckSize - cardsLeft, handSize - 1);\n    var probabilityOfExactlyOneCard = totalHandsWithExactlyOneCard / totalPossibleHands;\n\n    var _probabilityOfNoCards = 1 - chanceOfHavingASpecificCard(handSize, cardsLeft, 1, deckSize);\n\n    if (numberOfSpecificCards === 2) {\n      return 1 - _probabilityOfNoCards - probabilityOfExactlyOneCard;\n    } else if (numberOfSpecificCards === 3) {\n      var totalHandsWithExactlyTwoCards = choose(cardsLeft, 2) * choose(deckSize - cardsLeft, handSize - 2);\n      var probabilityOfExactlyTwoCards = totalHandsWithExactlyTwoCards / totalPossibleHands;\n      return 1 - _probabilityOfNoCards - probabilityOfExactlyOneCard - probabilityOfExactlyTwoCards;\n    } else {\n      // If they are claiming 4 of a kind, wait for someone else to call bullshit\n      return 1;\n    }\n  }\n}\n\nexports.CallUnlikely =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function CallUnlikely() {\n    _classCallCheck(this, CallUnlikely);\n  }\n\n  _createClass(CallUnlikely, [{\n    key: \"callBullshit\",\n    value: function callBullshit(state) {\n      if (alwaysCall(state)) {\n        return true;\n      }\n\n      var hand = state.hand;\n      var currentCard = state.currentCard;\n      var numberOfCardsPlayed = state.numberOfCardsPlayed;\n      var playerCards = state.otherPlayerCards[state.playerTurn - 1];\n      return chanceOfHavingASpecificCard(playerCards, 4 - hand[currentCard], numberOfCardsPlayed, 52 - hand.count()) < 0.1;\n    }\n  }]);\n\n  return CallUnlikely;\n}();\n\nfunction factorial(x) {\n  if (x <= 0) {\n    return 1;\n  }\n\n  return x * factorial(x - 1);\n}\n\nfunction choose(n, k) {\n  return factorial(n) / (factorial(k) * factorial(n - k));\n}","var _classCallCheck = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/createClass\");\n\nvar assert = require('assert');\n\nvar Player = require('./player.js').Player;\n\nvar SyncPlayer = require('./player.js').SyncPlayer;\n\nvar Game =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function Game(players) {\n    _classCallCheck(this, Game);\n\n    var deck = new Deck();\n    deck.shuffle();\n    this.players = players;\n    this.hands = deck.dealHands();\n    this.discard = [];\n    this.turn = 0;\n    this.currentCard = 1;\n  }\n\n  _createClass(Game, [{\n    key: \"gameStateForPlayer\",\n    value: function gameStateForPlayer(player) {\n      var gameState = {}; // The current player is always indexed to zero\n      // So, these are the indexes of the other playerss        \n\n      gameState.otherPlayerCards = [this.hands[this.adjustedIndexForPlayerGivenTurn(player, 1)].count(), this.hands[this.adjustedIndexForPlayerGivenTurn(player, 2)].count(), this.hands[this.adjustedIndexForPlayerGivenTurn(player, 3)].count()];\n      gameState.hand = Object.assign(new Hand(), this.hands[player]);\n      gameState.discardSize = this.discard.length;\n      gameState.currentCard = this.currentCard;\n      return gameState;\n    }\n  }, {\n    key: \"bullshitStateForPlayer\",\n    value: function bullshitStateForPlayer(player, numberOfCardsPlayed) {\n      var state = this.gameStateForPlayer(player);\n      state.playerTurn = this.indexOfPlayerInRelationToCurrentPlayer(this.turn, player);\n      state.numberOfCardsPlayed = numberOfCardsPlayed;\n      return state;\n    }\n  }, {\n    key: \"summaryState\",\n    value: function summaryState(player, cardsPlayed, bullshitCalled, callingPlayer, playerLied) {\n      var state = this.bullshitStateForPlayer(player, cardsPlayed.length);\n      state.bullshitCalled = bullshitCalled;\n      state.callingPlayer = callingPlayer;\n      state.playerLied = playerLied;\n      var revealCards = bullshitCalled || player === this.turn;\n      state.actualCards = revealCards ? cardsPlayed : [];\n      return state;\n    }\n  }, {\n    key: \"playGame\",\n    value: function playGame() {\n      var _this = this;\n\n      return this.playTurn().then(function (result) {\n        var winner = _this.gameWon();\n\n        if (winner >= 0) {\n          return winner;\n        } else if (_this.gameDrawn()) {\n          return -1;\n        } else {\n          return _this.playGame();\n        }\n      });\n    }\n  }, {\n    key: \"gameWon\",\n    value: function gameWon() {\n      for (var i = 0; i < this.hands.length; i++) {\n        if (this.hands[i].count() == 0) {\n          return i;\n        }\n      }\n\n      return -1;\n    }\n  }, {\n    key: \"gameDrawn\",\n    value: function gameDrawn() {\n      if (this.turnNumber > 10000) {\n        return true;\n      }\n\n      return this.hands[0].drawnHand() && this.hands[1].drawnHand() && this.hands[2].drawnHand() && this.hands[3].drawnHand();\n    }\n  }, {\n    key: \"playTurn\",\n    value: function playTurn() {\n      var _this2 = this;\n\n      if (!this.turnNumber) {\n        this.turnNumber = 0;\n      }\n\n      this.turnNumber++;\n      var gameState = this.gameStateForPlayer(this.turn); // Ask the player what he wants to do\n\n      return this.players[this.turn].playHand(gameState).then(function (discardedCards) {\n        assert(Array.isArray(discardedCards), 'discardedCards isnt an array: ' + discardedCards + ' playing: ' + _this2.turn);\n        assert(discardedCards.length > 0, 'player: ' + _this2.turn + ' returned no cards for a play.');\n        var hand = _this2.hands[_this2.turn]; // Discard the cards\n\n        for (var i = 0; i < discardedCards.length; i++) {\n          var card = discardedCards[i];\n          assert(hand[card] > 0, 'Card doesnt exist in hand: ' + card + ' hand: ' + hand);\n          hand[card]--;\n\n          _this2.discard.push(card);\n        }\n\n        return _this2.askEachPlayerForBullshit(discardedCards).then(function () {\n          // Advance gamestate\n          _this2.turn++;\n          _this2.turn = _this2.turn % 4;\n          _this2.currentCard++;\n\n          if (_this2.currentCard > 13) {\n            _this2.currentCard = 1;\n          }\n        });\n      });\n    }\n  }, {\n    key: \"askEachPlayerForBullshit\",\n    value: function askEachPlayerForBullshit(discardedCards) {\n      var _this3 = this;\n\n      var otherPlayers = [this.players[this.adjustedIndexForPlayerGivenTurn(this.turn, 1)], this.players[this.adjustedIndexForPlayerGivenTurn(this.turn, 2)], this.players[this.adjustedIndexForPlayerGivenTurn(this.turn, 3)]];\n      return this.askForBullshit(discardedCards.length, 0, otherPlayers).then(function (result) {\n        var bullshitCalled = result !== -1;\n        var playerLied = false;\n\n        if (bullshitCalled) {\n          if (_this3.validPlay(discardedCards)) {\n            var losingPlayerActualIndex = _this3.originalIndexFromAdjustedIndex(_this3.turn, result);\n\n            _this3.hands[losingPlayerActualIndex].addCards(_this3.discard);\n\n            _this3.discard = [];\n          } else {\n            playerLied = true;\n\n            _this3.hands[_this3.turn].addCards(_this3.discard);\n\n            _this3.discard = [];\n          }\n        }\n\n        var callingPlayerIndex = bullshitCalled ? _this3.originalIndexFromAdjustedIndex(_this3.turn, result) : 0;\n        return _this3.informPlayersOfRoundSummary(0, discardedCards, bullshitCalled, callingPlayerIndex, playerLied);\n      });\n    }\n  }, {\n    key: \"informPlayersOfRoundSummary\",\n    value: function informPlayersOfRoundSummary(playerIndex, cardsPlayed, bullshitCalled, callingPlayer, playerLied) {\n      var _this4 = this;\n\n      var callingPlayerAdjusted = bullshitCalled ? this.indexOfPlayerInRelationToCurrentPlayer(callingPlayer, playerIndex) : 0;\n      var state = this.summaryState(playerIndex, cardsPlayed, bullshitCalled, callingPlayerAdjusted, playerLied);\n      return this.players[playerIndex].roundSummary(state).then(function () {\n        if (playerIndex + 1 < 4) {\n          return _this4.informPlayersOfRoundSummary(playerIndex + 1, cardsPlayed, bullshitCalled, callingPlayer, playerLied);\n        }\n      });\n    }\n  }, {\n    key: \"askForBullshit\",\n    value: function askForBullshit(numberOfCardsPlayed, index, players) {\n      var _this5 = this;\n\n      var currentPlayerIndex = this.originalIndexFromAdjustedIndex(this.turn, index);\n      return players[index].callBullshit(this.bullshitStateForPlayer(currentPlayerIndex, numberOfCardsPlayed)).then(function (result) {\n        if (result) {\n          return index;\n        } else {\n          if (index + 1 < players.length) {\n            return _this5.askForBullshit(numberOfCardsPlayed, index + 1, players);\n          } else {\n            return -1;\n          }\n        }\n      });\n    }\n  }, {\n    key: \"validPlay\",\n    value: function validPlay(discardedCards) {\n      for (var i = 0; i < discardedCards.length; i++) {\n        if (discardedCards[i] != this.currentCard) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"indexOfPlayerInRelationToCurrentPlayer\",\n    value: function indexOfPlayerInRelationToCurrentPlayer(actualIndex, currentPlayerIndex) {\n      // You want to find the difference between the current player and the actual player\n      // Add 4 because otherwise, it could be negative\n      return (4 + (actualIndex - currentPlayerIndex)) % 4;\n    }\n  }, {\n    key: \"adjustedIndexForPlayerGivenTurn\",\n    value: function adjustedIndexForPlayerGivenTurn(turn, index) {\n      return (turn + index) % 4;\n    }\n  }, {\n    key: \"originalIndexFromAdjustedIndex\",\n    value: function originalIndexFromAdjustedIndex(turn, index) {\n      return (turn + index + 1) % 4;\n    }\n  }]);\n\n  return Game;\n}();\n\nvar Hand =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function Hand() {\n    _classCallCheck(this, Hand);\n  }\n\n  _createClass(Hand, [{\n    key: \"count\",\n    value: function count() {\n      var total = 0;\n\n      for (var i = 1; i <= 13; i++) {\n        total += this[i];\n      }\n\n      return total;\n    }\n  }, {\n    key: \"drawnHand\",\n    value: function drawnHand() {\n      for (var i = 1; i <= 13; i++) {\n        if (this[i] != 4 || this[i] !== 0) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"addCards\",\n    value: function addCards(cards) {\n      var _this6 = this;\n\n      cards.forEach(function (card) {\n        _this6[card]++;\n      });\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return '' + this.toArray();\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      var cards = [];\n\n      for (var i = 1; i <= 13; i++) {\n        for (var j = 0; j < this[i]; j++) {\n          cards.push(i);\n        }\n      }\n\n      return cards;\n    }\n  }]);\n\n  return Hand;\n}();\n\nvar Deck =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function Deck() {\n    _classCallCheck(this, Deck);\n\n    this.cards = [];\n\n    for (var i = 1; i <= 13; i++) {\n      for (var j = 0; j < 4; j++) {\n        this.cards.push(i);\n      }\n    }\n  }\n\n  _createClass(Deck, [{\n    key: \"dealHands\",\n    value: function dealHands() {\n      var hands = [];\n\n      for (var n = 0; n < 4; n++) {\n        var hand = new Hand();\n\n        for (var i = 1; i <= 13; i++) {\n          hand[i] = 0;\n        }\n\n        for (var cardIndex = n * 13; cardIndex < (n + 1) * 13; cardIndex++) {\n          hand[this.cards[cardIndex]]++;\n        }\n\n        hands.push(hand);\n      }\n\n      return hands;\n    }\n  }, {\n    key: \"shuffle\",\n    value: function shuffle() {\n      var newCards = [];\n\n      while (this.cards.length > 0) {\n        var index = this.randomIndex();\n        newCards.push(this.cards[index]);\n        this.cards.splice(index, 1);\n      }\n\n      this.cards = newCards;\n    }\n  }, {\n    key: \"randomIndex\",\n    value: function randomIndex() {\n      return Math.floor(Math.random() * this.cards.length);\n    }\n  }]);\n\n  return Deck;\n}();\n\nmodule.exports.Game = Game;","var _get = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/get\");\n\nvar _possibleConstructorReturn = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _classCallCheck = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/peterlivesey/Repo/bs/bs-web/node_modules/@babel/runtime/helpers/createClass\");\n\nvar assert = require('assert');\n\nexports.AvoidLying =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function AvoidLying() {\n    _classCallCheck(this, AvoidLying);\n  }\n\n  _createClass(AvoidLying, [{\n    key: \"playHand\",\n    value: function playHand(state) {\n      var cards = [];\n\n      for (var i = 0; i < state.hand[state.currentCard]; i++) {\n        cards.push(state.currentCard);\n      }\n\n      if (cards.length > 0) {\n        return cards;\n      } else {\n        return [ideaLyingCardFromHand(state.hand, state.currentCard)];\n      }\n    }\n  }]);\n\n  return AvoidLying;\n}();\n\nvar LiePercentage =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function LiePercentage(percentage) {\n    _classCallCheck(this, LiePercentage);\n\n    this.percentage = percentage;\n  }\n\n  _createClass(LiePercentage, [{\n    key: \"playHand\",\n    value: function playHand(state) {\n      var cards = [];\n\n      for (var i = 0; i < state.hand[state.currentCard]; i++) {\n        cards.push(state.currentCard);\n      }\n\n      state.hand[state.currentCard] = 0;\n\n      if (cards.length > 0) {\n        if (Math.random() < this.percentage && state.hand.count() > 0 && cards.length < 4) {\n          cards.push(ideaLyingCardFromHand(state.hand, state.currentCard));\n        }\n\n        return cards;\n      } else {\n        return [ideaLyingCardFromHand(state.hand, state.currentCard)];\n      }\n    }\n  }]);\n\n  return LiePercentage;\n}();\n\nexports.AlwaysLieOnSingles =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function AlwaysLieOnSingles() {\n    _classCallCheck(this, AlwaysLieOnSingles);\n  }\n\n  _createClass(AlwaysLieOnSingles, [{\n    key: \"playHand\",\n    value: function playHand(state) {\n      var cards = [];\n\n      for (var i = 0; i < state.hand[state.currentCard]; i++) {\n        cards.push(state.currentCard);\n      }\n\n      state.hand[state.currentCard] = 0;\n\n      if (state.hand.count() > 0 && cards.length <= 1) {\n        cards.push(ideaLyingCardFromHand(state.hand, state.currentCard));\n      }\n\n      return cards;\n    }\n  }]);\n\n  return AlwaysLieOnSingles;\n}();\n\nexports.Lie10Percent =\n/*#__PURE__*/\nfunction (_LiePercentage) {\n  \"use strict\";\n\n  _inherits(Lie10Percent, _LiePercentage);\n\n  function Lie10Percent() {\n    _classCallCheck(this, Lie10Percent);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Lie10Percent).call(this, 0.1));\n  }\n\n  return Lie10Percent;\n}(LiePercentage);\n\nexports.Lie50Percent =\n/*#__PURE__*/\nfunction (_LiePercentage2) {\n  \"use strict\";\n\n  _inherits(Lie10Percent, _LiePercentage2);\n\n  function Lie10Percent() {\n    _classCallCheck(this, Lie10Percent);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Lie10Percent).call(this, 0.5));\n  }\n\n  return Lie10Percent;\n}(LiePercentage);\n\nexports.AlwaysLie =\n/*#__PURE__*/\nfunction (_LiePercentage3) {\n  \"use strict\";\n\n  _inherits(AlwaysLie, _LiePercentage3);\n\n  function AlwaysLie() {\n    _classCallCheck(this, AlwaysLie);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(AlwaysLie).call(this, 1));\n  }\n\n  return AlwaysLie;\n}(LiePercentage);\n\nvar ExpectedValueLiar =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function ExpectedValueLiar() {\n    _classCallCheck(this, ExpectedValueLiar);\n\n    // Initialize each probability with 50%\n    this.oneCard = {\n      bsCalled: 1,\n      bsNotCalled: 1\n    };\n    this.twoCards = {\n      bsCalled: 1,\n      bsNotCalled: 1\n    };\n    this.threeCards = {\n      bsCalled: 1,\n      bsNotCalled: 1\n    };\n  }\n\n  _createClass(ExpectedValueLiar, [{\n    key: \"probabilityOfBS\",\n    value: function probabilityOfBS(numberOfCards) {\n      if (numberOfCards === 1) {\n        return this.oneCard.bsCalled / (this.oneCard.bsNotCalled + this.oneCard.bsCalled);\n      } else if (numberOfCards === 2) {\n        return this.twoCards.bsCalled / (this.twoCards.bsNotCalled + this.twoCards.bsCalled);\n      } else if (numberOfCards === 3) {\n        return this.threeCards.bsCalled / (this.threeCards.bsNotCalled + this.threeCards.bsCalled);\n      } else {\n        assert('number of cards is not 1, 2 or 3');\n        return 1;\n      }\n    }\n  }, {\n    key: \"expectedValue\",\n    value: function expectedValue(numberOfCards, discardSize, bluffing) {\n      if (!bluffing) {\n        // You will always get rid of exactly these cards\n        return numberOfCards;\n      } else {\n        var chanceOfBS = this.probabilityOfBS(numberOfCards);\n        return (1 - chanceOfBS) * numberOfCards - chanceOfBS * discardSize;\n      }\n    }\n  }, {\n    key: \"playHand\",\n    value: function playHand(state) {\n      var cards = [];\n\n      for (var i = 0; i < state.hand[state.currentCard]; i++) {\n        cards.push(state.currentCard);\n      }\n\n      state.hand[state.currentCard] = 0;\n\n      if (cards.length === 4) {\n        return cards;\n      }\n\n      var expectedValueForOneCard = this.expectedValue(1, state.discardSize, cards.length < 1);\n      var expectedValueForTwoCards = this.expectedValue(2, state.discardSize, cards.length < 2);\n      var expectedValueForThreeCards = this.expectedValue(3, state.discardSize, cards.length < 3);\n      var extraCards = 0;\n\n      if (expectedValueForOneCard > expectedValueForTwoCards && expectedValueForOneCard > expectedValueForThreeCards) {\n        extraCards = 1 - cards.length;\n      } else if (expectedValueForTwoCards > expectedValueForOneCard && expectedValueForTwoCards > expectedValueForThreeCards) {\n        extraCards = 2 - cards.length;\n      } else {\n        // Let's do three cards\n        extraCards = 3 - cards.length;\n      } // console.log(this)\n\n\n      var handCount = state.hand.count() + cards.length; // console.log('hand count: ' + handCount + ' current hand: ' + cards + ' extra cards: ' + extraCards + ' discard: ' + state.discardSize + ' values: ' + expectedValueForOneCard + ' - ' + expectedValueForTwoCards + ' - ' + expectedValueForThreeCards)\n\n      for (var i = 0; i < extraCards; i++) {\n        if (state.hand.count() > 0 && cards.length < 4) {\n          var card = ideaLyingCardFromHand(state.hand, state.currentCard);\n          cards.push(ideaLyingCardFromHand(state.hand, state.currentCard));\n          state.hand[card]--;\n        }\n      } // console.log('result: ' + cards)\n\n\n      return cards;\n    }\n  }, {\n    key: \"roundSummary\",\n    value: function roundSummary(summary) {\n      if (summary.bullshitCalled && summary.callingPlayer === 0) {\n        // Bullshit was called by me, so don't count this towards totals\n        return;\n      }\n\n      if (summary.numberOfCardsPlayed === 1) {\n        if (summary.bullshitCalled) {\n          this.oneCard.bsCalled++;\n        } else {\n          this.oneCard.bsNotCalled++;\n        }\n      } else if (summary.numberOfCardsPlayed === 2) {\n        if (summary.bullshitCalled) {\n          this.twoCards.bsCalled++;\n        } else {\n          this.twoCards.bsNotCalled++;\n        }\n      } else if (summary.numberOfCardsPlayed === 3) {\n        if (summary.bullshitCalled) {\n          this.threeCards.bsCalled++;\n        } else {\n          this.threeCards.bsNotCalled++;\n        }\n      }\n    }\n  }]);\n\n  return ExpectedValueLiar;\n}();\n\nexports.ExpectedValueLiar = ExpectedValueLiar;\n\nexports.LyingCloser =\n/*#__PURE__*/\nfunction (_LiePercentage4) {\n  \"use strict\";\n\n  _inherits(LyingCloser, _LiePercentage4);\n\n  function LyingCloser() {\n    _classCallCheck(this, LyingCloser);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LyingCloser).call(this, 1));\n  }\n\n  _createClass(LyingCloser, [{\n    key: \"playHand\",\n    value: function playHand(state) {\n      var closing = canFinishWithoutLying(state.currentCard, state.hand, 0);\n      var cards = [];\n\n      for (var i = 0; i < state.hand[state.currentCard]; i++) {\n        cards.push(state.currentCard);\n      }\n\n      if (closing) {\n        return cards;\n      } else {\n        return _get(_getPrototypeOf(LyingCloser.prototype), \"playHand\", this).call(this, state);\n      }\n    }\n  }]);\n\n  return LyingCloser;\n}(LiePercentage);\n\nexports.Closer =\n/*#__PURE__*/\nfunction (_ExpectedValueLiar) {\n  \"use strict\";\n\n  _inherits(Closer, _ExpectedValueLiar);\n\n  function Closer() {\n    _classCallCheck(this, Closer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Closer).apply(this, arguments));\n  }\n\n  _createClass(Closer, [{\n    key: \"playHand\",\n    value: function playHand(state) {\n      var closing = canFinishWithoutLying(state.currentCard, state.hand, 0);\n      var cards = [];\n\n      for (var i = 0; i < state.hand[state.currentCard]; i++) {\n        cards.push(state.currentCard);\n      }\n\n      state.hand[state.currentCard] = 0;\n\n      if (cards.length === 4) {\n        return cards;\n      } else {\n        if (closing) {\n          return cards;\n        } else {\n          return _get(_getPrototypeOf(Closer.prototype), \"playHand\", this).call(this, state);\n        }\n      }\n    }\n  }]);\n\n  return Closer;\n}(ExpectedValueLiar);\n\nvar RallyTime =\n/*#__PURE__*/\nfunction (_LiePercentage5) {\n  \"use strict\";\n\n  _inherits(RallyTime, _LiePercentage5);\n\n  function RallyTime() {\n    _classCallCheck(this, RallyTime);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(RallyTime).call(this, 0));\n  }\n\n  _createClass(RallyTime, [{\n    key: \"playHand\",\n    value: function playHand(state) {\n      var numberOfBetterPlayers = 0;\n\n      if (state.hand.count() >= state.otherPlayerCards[0]) {\n        numberOfBetterPlayers++;\n      }\n\n      if (state.hand.count() >= state.otherPlayerCards[1]) {\n        numberOfBetterPlayers++;\n      }\n\n      if (state.hand.count() >= state.otherPlayerCards[2]) {\n        numberOfBetterPlayers++;\n      }\n\n      if (numberOfBetterPlayers === 3) {\n        this.percentage = 0.75;\n      } else if (numberOfBetterPlayers === 2) {\n        this.percentage = 0.15;\n      } else {\n        this.percentage = 0;\n      }\n\n      return _get(_getPrototypeOf(RallyTime.prototype), \"playHand\", this).call(this, state);\n    }\n  }]);\n\n  return RallyTime;\n}(LiePercentage);\n\nexports.RallyTime = RallyTime;\n\nexports.RallyCloser =\n/*#__PURE__*/\nfunction (_RallyTime) {\n  \"use strict\";\n\n  _inherits(RallyCloser, _RallyTime);\n\n  function RallyCloser() {\n    _classCallCheck(this, RallyCloser);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(RallyCloser).apply(this, arguments));\n  }\n\n  _createClass(RallyCloser, [{\n    key: \"playHand\",\n    value: function playHand(state) {\n      var closing = canFinishWithoutLying(state.currentCard, state.hand, 0);\n\n      if (closing) {\n        var cards = [];\n\n        for (var i = 0; i < state.hand[state.currentCard]; i++) {\n          cards.push(state.currentCard);\n        }\n\n        state.hand[state.currentCard] = 0;\n        assert(cards.length > 0, 'Closing thought he could close, but didnt have the current card - ' + state.currentCard + ' - ' + state.hand);\n        return cards;\n      } else {\n        return _get(_getPrototypeOf(RallyCloser.prototype), \"playHand\", this).call(this, state);\n      }\n    }\n  }]);\n\n  return RallyCloser;\n}(RallyTime);\n\nfunction ideaLyingCardFromHand(hand, currentTurn) {\n  if (hand.count() === 0) {\n    assert(false, 'empty hand in ideaLyingCardFromHand');\n  }\n\n  while (true) {\n    currentTurn -= 4;\n\n    if (currentTurn < 1) {\n      currentTurn += 13;\n    }\n\n    if (hand[currentTurn] > 0) {\n      return currentTurn;\n    }\n  }\n}\n\nfunction canFinishWithoutLying(currentCard, hand, numberOfCardsUsed) {\n  if (numberOfCardsUsed >= hand.count()) {\n    return true;\n  }\n\n  if (hand[currentCard] === 0) {\n    return false;\n  }\n\n  var nextCard = currentCard + 4;\n\n  if (nextCard > 13) {\n    nextCard -= 13;\n  }\n\n  return canFinishWithoutLying(nextCard, hand, numberOfCardsUsed + hand[currentCard]);\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { Game } from 'cl/game'\nimport { Player, SyncPlayer } from 'cl/player'\nimport { NeverCall, CallUpdatingPercentage, CallPercentageOnWinner } from 'cl/callFunctions'\nimport { AvoidLying, Closer, LyingCloser, RallyCloser } from 'cl/playFunctions'\n\nconst playingStrategies = {\n  'AvoidLying': AvoidLying,\n  'Closer': Closer,\n  'LyingCloser': LyingCloser,\n  'RallyCloser': RallyCloser,\n}\n\nconst callingStrategies = {\n  'NeverCall': NeverCall,\n  'CallUpdatingPercentage': CallUpdatingPercentage,\n  'CallPercentageOnWinner': CallPercentageOnWinner\n}\n\nclass HumanPlayer extends Player {\n  constructor(onStateChange) {\n    super()\n\n    this.onStateChange = onStateChange\n  }\n\n  playHand(state) {\n    return new Promise((resolve) => {\n      state.playing = true\n      state.summary = false\n      state.cardsToPlay = []\n      this.onStateChange(state)\n      this.resolvePlayHand = resolve\n    })\n  }\n\n  callBullshit(state) {\n    return new Promise((resolve) => {\n      state.playing = false\n      state.summary = false\n      this.onStateChange(state)\n      this.resolveCallBullshit = resolve\n    })\n  }\n\n  roundSummary(summary) {\n    return new Promise((resolve) => {\n      summary.playing = false\n      summary.summary = true\n      this.onStateChange(summary)\n      this.resolveSummary = resolve\n    })\n  }\n}\n\nclass GameComponenet extends Component {\n  constructor(props) {\n    super(props)\n\n    this.stateChanged = this.stateChanged.bind(this)\n\n    this.state = {}\n  }\n\n  stateChanged(state) {\n    state.hand = state.hand.toArray()\n    this.setState(state)\n  }\n\n  componentDidMount() {\n    this.startNewGame()\n  }\n\n  startNewGame() {\n    const goodPlayingStrategies = [\n      'AvoidLying',\n      'Closer',\n      'LyingCloser',\n      'RallyCloser'\n    ]\n\n    const goodCallingStrategies = [\n      'NeverCall',\n      'CallUpdatingPercentage',\n      'CallPercentageOnWinner'\n    ]\n\n    function randomArrayElement(array) {\n      return array[Math.floor(Math.random() * array.length)]\n    }\n\n    const otherPlayerStrategies = [\n      {\n        play: randomArrayElement(goodPlayingStrategies),\n        call: randomArrayElement(goodCallingStrategies),\n      },\n      {\n        play: randomArrayElement(goodPlayingStrategies),\n        call: randomArrayElement(goodCallingStrategies),\n      },\n      {\n        play: randomArrayElement(goodPlayingStrategies),\n        call: randomArrayElement(goodCallingStrategies),\n      }\n    ]\n\n    const player = new HumanPlayer(this.stateChanged)\n    const player2 = new SyncPlayer(new playingStrategies[otherPlayerStrategies[0].play](), new callingStrategies[otherPlayerStrategies[0].call]())\n    const player3 = new SyncPlayer(new playingStrategies[otherPlayerStrategies[1].play](), new callingStrategies[otherPlayerStrategies[1].call]())\n    const player4 = new SyncPlayer(new playingStrategies[otherPlayerStrategies[2].play](), new callingStrategies[otherPlayerStrategies[2].call]())\n\n    const game = new Game([player, player2, player3, player4])\n    game.playGame().then((winningPlayer) => {\n      this.setState({\n        winningPlayer: winningPlayer,\n        gameOver: true\n      })\n    })\n\n    this.setState({\n      player: player,\n      game: game,\n      winningPlayer: undefined,\n      gameOver: false,\n      otherPlayerStrategies: otherPlayerStrategies\n    })\n  }\n\n  cardsToAdd(cards) {\n    const cardLinks = cards.map((card, index) => {\n      return (\n        <button onClick={() => {\n          var hand = this.state.hand\n          hand.splice(index, 1)\n          var cardsToPlay = this.state.cardsToPlay || []\n          cardsToPlay.push(card)\n          this.setState({\n            hand: hand,\n            cardsToPlay: cardsToPlay\n          })\n        }}\n          key={index}>{card}</button>\n      )\n    })\n\n    return (\n      <div>\n        {cardLinks}\n      </div>\n    )\n  }\n\n  cardsToRemove(cards) {\n    const cardLinks = cards.map((card, index) => {\n      return (\n        <button onClick={() => {\n          var hand = this.state.hand\n          hand.push(card)\n          var cardsToPlay = this.state.cardsToPlay || []\n          cardsToPlay.splice(index, 1)\n          this.setState({\n            hand: hand,\n            cardsToPlay: cardsToPlay\n          })\n        }}\n          key={index}>{card}</button>\n      )\n    })\n\n    return (\n      <div>\n        {cardLinks}\n      </div>\n    )\n  }\n\n  playCardsComponent() {\n    var playCards\n    if (this.state.cardsToPlay.length > 0) {\n      playCards = (\n        <div>\n          <button onClick={() => { this.state.player.resolvePlayHand(this.state.cardsToPlay) }}>Play Cards!</button>\n        </div>\n      )\n    } else {\n      playCards = (<div></div>)\n    }\n\n    var hand = this.cardsToAdd(this.state.hand || [])\n\n    return (\n      <div>\n        <div>\n          Your hand: {hand}\n        </div>\n        <div>\n          Discard size: {this.state.discardSize}\n        </div>\n        <div>\n          Player 2 has {this.state.otherPlayerCards[0]} cards. Player 3 has {this.state.otherPlayerCards[1]} cards. Player 4 has {this.state.otherPlayerCards[2]} cards.\n        </div>\n        <div>\n          Current card: {this.state.currentCard}\n        </div>\n        <div>\n          Tap cards to add them to your hand.\n      </div>\n        <div>\n          You are about to play: {this.cardsToRemove(this.state.cardsToPlay || [])}\n        </div>\n        {playCards}\n      </div>\n    )\n  }\n\n  summaryComponent() {\n    var text\n    var playingPlayer = this.state.playerTurn + 1\n    if (this.state.bullshitCalled) {\n      var callingPlayer = this.state.callingPlayer + 1\n      text = 'On the last turn, bullshit was called by player ' + callingPlayer + '. '\n      if (this.state.playerLied) {\n        text += 'The player was lying and actually played: ' + this.state.actualCards\n      } else {\n        text += 'The player was telling the truth! (' + this.state.actualCards + '). Player ' + callingPlayer + ' has to pick up the discard pile.'\n      }\n    } else {\n      text = 'On the last turn, player ' + playingPlayer + ' played ' + this.state.numberOfCardsPlayed + ' cards and no-one called bullshit.'\n    }\n    return (\n      <div>\n        <div>\n          Current card: {this.state.currentCard}\n        </div>\n        <div>\n          {text}\n        </div>\n        <div>\n          Discard size: {this.state.discardSize}\n        </div>\n        <div>\n          <button onClick={() => { this.state.player.resolveSummary() }}>OK</button>\n        </div>\n      </div>\n    )\n  }\n\n  bullshitComponent() {\n    return (\n      <div>\n        <div>\n          Do you want to call bullshit on player {this.state.playerTurn + 1}?\n          </div>\n        <div>\n          Your hand: {'' + this.state.hand}\n        </div>\n        <div>\n          Current card: {this.state.currentCard}\n        </div>\n        <div>\n          Number of cards played: {this.state.numberOfCardsPlayed}\n        </div>\n        <div>\n          Player 2 has {this.state.otherPlayerCards[0]} cards. Player 3 has {this.state.otherPlayerCards[1]} cards. Player 4 has {this.state.otherPlayerCards[2]} cards.\n        </div>\n        <div>\n          Discard size: {this.state.discardSize}\n        </div>\n        <div>\n          <button onClick={() => { this.state.player.resolveCallBullshit(true) }}>Yes!</button>\n          <button onClick={() => { this.state.player.resolveCallBullshit(false) }}>No...</button>\n        </div>\n      </div>\n    )\n  }\n\n  opponentDescription(index) {\n    const playingDescription = {\n      'AvoidLying': 'Avoids lying whenever possible',\n      'Closer': \"If they can win without lying, they don't lie. Otherwise, they lie if the expected value of lying is worth it\",\n      'LyingCloser': \"If they can win without lying, they don't lie. Otherwise, they always lie\",\n      'RallyCloser': \"If they can win without lying, they don't lie. Otherwise, they lie only when they are losing\"\n    }\n    \n    const callingDescriptions = {\n      'NeverCall': 'never calls bullshit unless they would immediately lose.',\n      'CallUpdatingPercentage': 'keeps track of how many people lie and calls bullshit if they lie often.',\n      'CallPercentageOnWinner': 'only calls bullshit on the winner every so often.'\n    }\n    \n    const opponent = this.state.otherPlayerStrategies[index]\n\n    const text = playingDescription[opponent.play] + ', and ' + callingDescriptions[opponent.call]\n\n    return text\n  }\n\n  playingAgainst() {\n    return (\n      <div>\n        <div>\n          You were playing against:\n        </div>\n        <div>\n          Player 2: {this.opponentDescription(0)}\n        </div>\n        <div>\n          Player 3: {this.opponentDescription(1)}\n        </div>\n        <div>\n          Player 4: {this.opponentDescription(2)}\n        </div>\n      </div>\n    )\n  }\n\n  render() {\n    if (this.state.gameOver) {\n      var winText\n      if (this.state.winningPlayer === 0) {\n        winText = 'You won! Contrats :D.'\n      } else {\n        var player = this.state.winningPlayer + 1\n        winText = 'Player ' + player + ' won the game. Sorry, you lost.'\n      }\n\n      return (\n        <div>\n          <div>\n            {winText}\n          </div>\n          {this.playingAgainst()}\n          <div>\n            <button onClick={() => { this.startNewGame() }}>Play again</button>\n          </div>\n        </div>\n      )\n    } else if (!this.state.hand) {\n      return (\n        <div>Loading...</div>\n      )\n    }\n\n    var mainComponent\n\n    if (this.state.playing) {\n      mainComponent = this.playCardsComponent()\n    } else if (this.state.summary) {\n      mainComponent = this.summaryComponent()\n    } else {\n      mainComponent = this.bullshitComponent()\n    }\n\n    return (\n      <div>\n        {mainComponent}\n      </div>\n    )\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n  }\n\n  startGame() {\n    this.setState({ playingGame: true })\n  }\n\n  render() {\n    var mainContent\n\n    if (this.state.playingGame) {\n      mainContent = (\n        <div>\n          <GameComponenet />\n        </div>\n      )\n    } else {\n      mainContent = (\n        <div>\n          <button onClick={() => { this.startGame() }}>Start Game</button>\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>BS</h1>\n        </header>\n        {mainContent}\n      </div>\n    );\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}